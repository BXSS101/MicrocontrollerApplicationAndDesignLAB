
Lab06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004218  08004218  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004220  08004220  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004220  08004220  00014220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08004298  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004298  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb50  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f18  00000000  00000000  0002fbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00031b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  000327b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027478  00000000  00000000  00033380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b3  00000000  00000000  0005a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8e00  00000000  00000000  0006a9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001637ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e4  00000000  00000000  001637fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080041a0 	.word	0x080041a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080041a0 	.word	0x080041a0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_GPIO_Init+0x2c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <MX_GPIO_Init+0x2c>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_GPIO_Init+0x2c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800

08000624 <displayNumber>:
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void displayNumber(uint32_t x){
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	; 0x70
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	char str[100];
	snprintf(str, sizeof str, "%lu", (unsigned long)x);
 800062c:	f107 000c 	add.w	r0, r7, #12
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <displayNumber+0x44>)
 8000634:	2164      	movs	r1, #100	; 0x64
 8000636:	f003 f911 	bl	800385c <sniprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 100);
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdfe 	bl	8000240 <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	f107 010c 	add.w	r1, r7, #12
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	4807      	ldr	r0, [pc, #28]	; (800066c <displayNumber+0x48>)
 8000650:	f002 fc2a 	bl	8002ea8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", strlen("\n\r"), 100);
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	2202      	movs	r2, #2
 8000658:	4905      	ldr	r1, [pc, #20]	; (8000670 <displayNumber+0x4c>)
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <displayNumber+0x48>)
 800065c:	f002 fc24 	bl	8002ea8 <HAL_UART_Transmit>
}
 8000660:	bf00      	nop
 8000662:	3770      	adds	r7, #112	; 0x70
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	080041b8 	.word	0x080041b8
 800066c:	2000012c 	.word	0x2000012c
 8000670:	080041bc 	.word	0x080041bc

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fafb 	bl	8000c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f81a 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f7ff ffb8 	bl	80005f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000684:	f000 f95a 	bl	800093c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000688:	f000 f9ac 	bl	80009e4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800068c:	f000 fa38 	bl	8000b00 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000690:	4806      	ldr	r0, [pc, #24]	; (80006ac <main+0x38>)
 8000692:	f001 ff41 	bl	8002518 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  displayNumber(count);
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <main+0x3c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ffc2 	bl	8000624 <displayNumber>
	  HAL_Delay(400);
 80006a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006a4:	f000 fb42 	bl	8000d2c <HAL_Delay>
	  displayNumber(count);
 80006a8:	e7f5      	b.n	8000696 <main+0x22>
 80006aa:	bf00      	nop
 80006ac:	20000094 	.word	0x20000094
 80006b0:	2000008c 	.word	0x2000008c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f8c2 	bl	800384c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xb0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xb0>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xb0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <SystemClock_Config+0xb4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <SystemClock_Config+0xb4>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <SystemClock_Config+0xb4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fde5 	bl	80012f0 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800072c:	f000 f81e 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f87e 	bl	800184c <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000756:	f000 f809 	bl	800076c <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x44>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_MspInit+0x44>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x44>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x44>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x44>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x44>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80007ae:	2005      	movs	r0, #5
 80007b0:	f000 fbb0 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080c:	f000 fa6e 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a03      	ldr	r2, [pc, #12]	; (800082c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000820:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000824:	f001 fef0 	bl	8002608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000008c 	.word	0x2000008c
 8000830:	20000094 	.word	0x20000094

08000834 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b09b      	sub	sp, #108	; 0x6c
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	char temp[100];
	int len = sprintf(temp, "%02d:%02d\r", count/1000/60, (count/1000)%60);
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <TIM2_IRQHandler+0x5c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <TIM2_IRQHandler+0x60>)
 8000840:	fba2 2303 	umull	r2, r3, r2, r3
 8000844:	0b9c      	lsrs	r4, r3, #14
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <TIM2_IRQHandler+0x5c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <TIM2_IRQHandler+0x64>)
 800084c:	fba2 2303 	umull	r2, r3, r2, r3
 8000850:	0999      	lsrs	r1, r3, #6
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <TIM2_IRQHandler+0x68>)
 8000854:	fba3 2301 	umull	r2, r3, r3, r1
 8000858:	095a      	lsrs	r2, r3, #5
 800085a:	4613      	mov	r3, r2
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	1a9b      	subs	r3, r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	1aca      	subs	r2, r1, r3
 8000864:	4638      	mov	r0, r7
 8000866:	4613      	mov	r3, r2
 8000868:	4622      	mov	r2, r4
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <TIM2_IRQHandler+0x6c>)
 800086c:	f003 f82a 	bl	80038c4 <siprintf>
 8000870:	6678      	str	r0, [r7, #100]	; 0x64
	HAL_UART_Transmit(&huart3, (unsigned char *) temp, len, 100);
 8000872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000874:	b29a      	uxth	r2, r3
 8000876:	4639      	mov	r1, r7
 8000878:	2364      	movs	r3, #100	; 0x64
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <TIM2_IRQHandler+0x70>)
 800087c:	f002 fb14 	bl	8002ea8 <HAL_UART_Transmit>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <TIM2_IRQHandler+0x74>)
 8000882:	f001 fec1 	bl	8002608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	376c      	adds	r7, #108	; 0x6c
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	bf00      	nop
 8000890:	2000008c 	.word	0x2000008c
 8000894:	45e7b273 	.word	0x45e7b273
 8000898:	10624dd3 	.word	0x10624dd3
 800089c:	88888889 	.word	0x88888889
 80008a0:	080041c0 	.word	0x080041c0
 80008a4:	2000012c 	.word	0x2000012c
 80008a8:	200000e0 	.word	0x200000e0

080008ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b4:	4a14      	ldr	r2, [pc, #80]	; (8000908 <_sbrk+0x5c>)
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <_sbrk+0x60>)
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <_sbrk+0x64>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <_sbrk+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d207      	bcs.n	80008ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008dc:	f002 ff8c 	bl	80037f8 <__errno>
 80008e0:	4603      	mov	r3, r0
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	e009      	b.n	8000900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <_sbrk+0x64>)
 80008fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008fe:	68fb      	ldr	r3, [r7, #12]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20080000 	.word	0x20080000
 800090c:	00000400 	.word	0x00000400
 8000910:	20000090 	.word	0x20000090
 8000914:	200001c8 	.word	0x200001c8

08000918 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_TIM1_Init+0xa0>)
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <MX_TIM1_Init+0xa4>)
 800095e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000962:	22d7      	movs	r2, #215	; 0xd7
 8000964:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_TIM1_Init+0xa0>)
 800096e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000972:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_TIM1_Init+0xa0>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000986:	4815      	ldr	r0, [pc, #84]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000988:	f001 fd6e 	bl	8002468 <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000992:	f7ff feeb 	bl	800076c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <MX_TIM1_Init+0xa0>)
 80009a4:	f001 ff50 	bl	8002848 <HAL_TIM_ConfigClockSource>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009ae:	f7ff fedd 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_TIM1_Init+0xa0>)
 80009c4:	f002 f976 	bl	8002cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009ce:	f7ff fecd 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000094 	.word	0x20000094
 80009e0:	40010000 	.word	0x40010000

080009e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a2a:	4814      	ldr	r0, [pc, #80]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a2c:	f001 fd1c 	bl	8002468 <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a36:	f7ff fe99 	bl	800076c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a48:	f001 fefe 	bl	8002848 <HAL_TIM_ConfigClockSource>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a52:	f7ff fe8b 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a64:	f002 f926 	bl	8002cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a6e:	f7ff fe7d 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000e0 	.word	0x200000e0

08000a80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <HAL_TIM_Base_MspInit+0x78>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d114      	bne.n	8000abc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_TIM_Base_MspInit+0x7c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_TIM_Base_MspInit+0x7c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_TIM_Base_MspInit+0x7c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2101      	movs	r1, #1
 8000aae:	2019      	movs	r0, #25
 8000ab0:	f000 fa3b 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab4:	2019      	movs	r0, #25
 8000ab6:	f000 fa54 	bl	8000f62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000aba:	e018      	b.n	8000aee <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ac4:	d113      	bne.n	8000aee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_TIM_Base_MspInit+0x7c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <HAL_TIM_Base_MspInit+0x7c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_TIM_Base_MspInit+0x7c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	201c      	movs	r0, #28
 8000ae4:	f000 fa21 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae8:	201c      	movs	r0, #28
 8000aea:	f000 fa3a 	bl	8000f62 <HAL_NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010000 	.word	0x40010000
 8000afc:	40023800 	.word	0x40023800

08000b00 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_USART3_UART_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART3_UART_Init+0x58>)
 8000b44:	f002 f962 	bl	8002e0c <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f7ff fe0d 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000012c 	.word	0x2000012c
 8000b5c:	40004800 	.word	0x40004800

08000b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0ae      	sub	sp, #184	; 0xb8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2290      	movs	r2, #144	; 0x90
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 fe63 	bl	800384c <memset>
  if(uartHandle->Instance==USART3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <HAL_UART_MspInit+0xb4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d13c      	bne.n	8000c0a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 f83a 	bl	8001c18 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000baa:	f7ff fddf 	bl	800076c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_UART_MspInit+0xbc>)
 8000c06:	f000 f9c7 	bl	8000f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	37b8      	adds	r7, #184	; 0xb8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40004800 	.word	0x40004800
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020c00 	.word	0x40020c00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff fe65 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 fdd9 	bl	8003804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fd0f 	bl	8000674 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c64:	08004228 	.word	0x08004228
  ldr r2, =_sbss
 8000c68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c6c:	200001c4 	.word	0x200001c4

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>

08000c72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c76:	2003      	movs	r0, #3
 8000c78:	f000 f94c 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 f805 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c82:	f7ff fd79 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f967 	bl	8000f7e <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f92f 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	200001b0 	.word	0x200001b0

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200001b0 	.word	0x200001b0

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <__NVIC_SetPriorityGrouping+0x40>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x40>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00
 8000db8:	05fa0000 	.word	0x05fa0000

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff3e 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff31 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e175      	b.n	80012a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 8164 	bne.w	800129e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <HAL_GPIO_Init+0x56>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d130      	bne.n	8001050 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 0201 	and.w	r2, r3, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b03      	cmp	r3, #3
 800105a:	d017      	beq.n	800108c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80be 	beq.w	800129e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b66      	ldr	r3, [pc, #408]	; (80012bc <HAL_GPIO_Init+0x324>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a65      	ldr	r2, [pc, #404]	; (80012bc <HAL_GPIO_Init+0x324>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_GPIO_Init+0x324>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800113a:	4a61      	ldr	r2, [pc, #388]	; (80012c0 <HAL_GPIO_Init+0x328>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a58      	ldr	r2, [pc, #352]	; (80012c4 <HAL_GPIO_Init+0x32c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d037      	beq.n	80011d6 <HAL_GPIO_Init+0x23e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a57      	ldr	r2, [pc, #348]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d031      	beq.n	80011d2 <HAL_GPIO_Init+0x23a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a56      	ldr	r2, [pc, #344]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d02b      	beq.n	80011ce <HAL_GPIO_Init+0x236>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a55      	ldr	r2, [pc, #340]	; (80012d0 <HAL_GPIO_Init+0x338>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d025      	beq.n	80011ca <HAL_GPIO_Init+0x232>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a54      	ldr	r2, [pc, #336]	; (80012d4 <HAL_GPIO_Init+0x33c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01f      	beq.n	80011c6 <HAL_GPIO_Init+0x22e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a53      	ldr	r2, [pc, #332]	; (80012d8 <HAL_GPIO_Init+0x340>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x22a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x344>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x226>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_GPIO_Init+0x348>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x222>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_GPIO_Init+0x34c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x21e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	; (80012e8 <HAL_GPIO_Init+0x350>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x21a>
 80011ae:	2309      	movs	r3, #9
 80011b0:	e012      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011b2:	230a      	movs	r3, #10
 80011b4:	e010      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011b6:	2308      	movs	r3, #8
 80011b8:	e00e      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011be:	2306      	movs	r3, #6
 80011c0:	e00a      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x240>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x328>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <HAL_GPIO_Init+0x354>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a34      	ldr	r2, [pc, #208]	; (80012ec <HAL_GPIO_Init+0x354>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <HAL_GPIO_Init+0x354>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a29      	ldr	r2, [pc, #164]	; (80012ec <HAL_GPIO_Init+0x354>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124a:	4b28      	ldr	r3, [pc, #160]	; (80012ec <HAL_GPIO_Init+0x354>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126e:	4a1f      	ldr	r2, [pc, #124]	; (80012ec <HAL_GPIO_Init+0x354>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_GPIO_Init+0x354>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_GPIO_Init+0x354>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f ae86 	bls.w	8000fb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021c00 	.word	0x40021c00
 80012e4:	40022000 	.word	0x40022000
 80012e8:	40022400 	.word	0x40022400
 80012ec:	40013c00 	.word	0x40013c00

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e29b      	b.n	800183e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8087 	beq.w	8001422 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001314:	4b96      	ldr	r3, [pc, #600]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b04      	cmp	r3, #4
 800131e:	d00c      	beq.n	800133a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001320:	4b93      	ldr	r3, [pc, #588]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d112      	bne.n	8001352 <HAL_RCC_OscConfig+0x62>
 800132c:	4b90      	ldr	r3, [pc, #576]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001338:	d10b      	bne.n	8001352 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d06c      	beq.n	8001420 <HAL_RCC_OscConfig+0x130>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d168      	bne.n	8001420 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e275      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x7a>
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a83      	ldr	r2, [pc, #524]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e02e      	b.n	80013c8 <HAL_RCC_OscConfig+0xd8>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x9c>
 8001372:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7e      	ldr	r2, [pc, #504]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a7b      	ldr	r2, [pc, #492]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xd8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0xc0>
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a75      	ldr	r2, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b73      	ldr	r3, [pc, #460]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a72      	ldr	r2, [pc, #456]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xd8>
 80013b0:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6e      	ldr	r2, [pc, #440]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a6b      	ldr	r2, [pc, #428]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fca0 	bl	8000d14 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc9c 	bl	8000d14 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e229      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe8>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc8c 	bl	8000d14 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fc88 	bl	8000d14 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e215      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b57      	ldr	r3, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x110>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d069      	beq.n	8001502 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142e:	4b50      	ldr	r3, [pc, #320]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143a:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x190>
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x17a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1e9      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	493d      	ldr	r1, [pc, #244]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e040      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a38      	ldr	r2, [pc, #224]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fc3e 	bl	8000d14 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff fc3a 	bl	8000d14 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1c7      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4929      	ldr	r1, [pc, #164]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
 80014ce:	e018      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fc1a 	bl	8000d14 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e4:	f7ff fc16 	bl	8000d14 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1a3      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d038      	beq.n	8001580 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d019      	beq.n	800154a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff fbf7 	bl	8000d14 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fbf3 	bl	8000d14 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e180      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x23a>
 8001548:	e01a      	b.n	8001580 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff fbdd 	bl	8000d14 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff fbd9 	bl	8000d14 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d903      	bls.n	8001574 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e166      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
 8001570:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	4b92      	ldr	r3, [pc, #584]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ee      	bne.n	800155e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a4 	beq.w	80016d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158e:	4b8c      	ldr	r3, [pc, #560]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10d      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a88      	ldr	r2, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b86      	ldr	r3, [pc, #536]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b6:	4b83      	ldr	r3, [pc, #524]	; (80017c4 <HAL_RCC_OscConfig+0x4d4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015c2:	4b80      	ldr	r3, [pc, #512]	; (80017c4 <HAL_RCC_OscConfig+0x4d4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7f      	ldr	r2, [pc, #508]	; (80017c4 <HAL_RCC_OscConfig+0x4d4>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fba1 	bl	8000d14 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fb9d 	bl	8000d14 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e12a      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x4d4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x31a>
 80015fc:	4b70      	ldr	r3, [pc, #448]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	4a6f      	ldr	r2, [pc, #444]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
 8001608:	e02d      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x33c>
 8001612:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a6a      	ldr	r2, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	e01c      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b05      	cmp	r3, #5
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x35e>
 8001634:	4b62      	ldr	r3, [pc, #392]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a61      	ldr	r2, [pc, #388]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a5e      	ldr	r2, [pc, #376]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
 800164e:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a5b      	ldr	r2, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d015      	beq.n	800169a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff fb51 	bl	8000d14 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fb4d 	bl	8000d14 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e0d8      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ee      	beq.n	8001676 <HAL_RCC_OscConfig+0x386>
 8001698:	e014      	b.n	80016c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff fb3b 	bl	8000d14 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fb37 	bl	8000d14 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0c2      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ee      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d105      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a3c      	ldr	r2, [pc, #240]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80ae 	beq.w	800183c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e0:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d06d      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d14b      	bne.n	800178c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a31      	ldr	r2, [pc, #196]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80016fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fb08 	bl	8000d14 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fb04 	bl	8000d14 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e091      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69da      	ldr	r2, [r3, #28]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	019b      	lsls	r3, r3, #6
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	3b01      	subs	r3, #1
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	071b      	lsls	r3, r3, #28
 8001752:	491b      	ldr	r1, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fad6 	bl	8000d14 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fad2 	bl	8000d14 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e05f      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x47c>
 800178a:	e057      	b.n	800183c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 8001792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fabc 	bl	8000d14 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff fab8 	bl	8000d14 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e045      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4b0>
 80017be:	e03d      	b.n	800183c <HAL_RCC_OscConfig+0x54c>
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_RCC_OscConfig+0x558>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d030      	beq.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d129      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d122      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001800:	4293      	cmp	r3, r2
 8001802:	d119      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d10f      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d107      	bne.n	8001838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0d0      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d910      	bls.n	8001894 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 020f 	bic.w	r2, r3, #15
 800187a:	4965      	ldr	r1, [pc, #404]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d040      	beq.n	8001970 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d115      	bne.n	800192e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e073      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06b      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4936      	ldr	r1, [pc, #216]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001940:	f7ff f9e8 	bl	8000d14 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff f9e4 	bl	8000d14 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e053      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d210      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 020f 	bic.w	r2, r3, #15
 8001986:	4922      	ldr	r1, [pc, #136]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4916      	ldr	r1, [pc, #88]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f821 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	490a      	ldr	r1, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1cc>)
 80019f0:	5ccb      	ldrb	r3, [r1, r3]
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1d0>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1d4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f944 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00
 8001a14:	40023800 	.word	0x40023800
 8001a18:	080041cc 	.word	0x080041cc
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a28:	b090      	sub	sp, #64	; 0x40
 8001a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a30:	2300      	movs	r3, #0
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d00d      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x40>
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	f200 80a1 	bhi.w	8001b90 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x34>
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a56:	e09b      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5c:	e09b      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5e:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_RCC_GetSysClockFreq+0x188>)
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a62:	e098      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d028      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	099b      	lsrs	r3, r3, #6
 8001a80:	2200      	movs	r2, #0
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	627a      	str	r2, [r7, #36]	; 0x24
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <HAL_RCC_GetSysClockFreq+0x188>)
 8001a90:	fb03 f201 	mul.w	r2, r3, r1
 8001a94:	2300      	movs	r3, #0
 8001a96:	fb00 f303 	mul.w	r3, r0, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a43      	ldr	r2, [pc, #268]	; (8001bac <HAL_RCC_GetSysClockFreq+0x188>)
 8001a9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aaa:	4413      	add	r3, r2
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	61fa      	str	r2, [r7, #28]
 8001ab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001abe:	f7fe fc17 	bl	80002f0 <__aeabi_uldivmod>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aca:	e053      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	099b      	lsrs	r3, r3, #6
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	617a      	str	r2, [r7, #20]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ade:	f04f 0b00 	mov.w	fp, #0
 8001ae2:	4652      	mov	r2, sl
 8001ae4:	465b      	mov	r3, fp
 8001ae6:	f04f 0000 	mov.w	r0, #0
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	0159      	lsls	r1, r3, #5
 8001af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af4:	0150      	lsls	r0, r2, #5
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	ebb2 080a 	subs.w	r8, r2, sl
 8001afe:	eb63 090b 	sbc.w	r9, r3, fp
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b16:	ebb2 0408 	subs.w	r4, r2, r8
 8001b1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	00eb      	lsls	r3, r5, #3
 8001b28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b2c:	00e2      	lsls	r2, r4, #3
 8001b2e:	4614      	mov	r4, r2
 8001b30:	461d      	mov	r5, r3
 8001b32:	eb14 030a 	adds.w	r3, r4, sl
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	eb45 030b 	adc.w	r3, r5, fp
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	028b      	lsls	r3, r1, #10
 8001b4e:	4621      	mov	r1, r4
 8001b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b54:	4621      	mov	r1, r4
 8001b56:	028a      	lsls	r2, r1, #10
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	60fa      	str	r2, [r7, #12]
 8001b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b68:	f7fe fbc2 	bl	80002f0 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001b84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3740      	adds	r7, #64	; 0x40
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	017d7840 	.word	0x017d7840

08001bb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a9b      	lsrs	r3, r3, #10
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	080041dc 	.word	0x080041dc

08001bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	f7ff ffdc 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0b5b      	lsrs	r3, r3, #13
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	080041dc 	.word	0x080041dc

08001c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d012      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c40:	4b69      	ldr	r3, [pc, #420]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a68      	ldr	r2, [pc, #416]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c4a:	6093      	str	r3, [r2, #8]
 8001c4c:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c54:	4964      	ldr	r1, [pc, #400]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d017      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c72:	4b5d      	ldr	r3, [pc, #372]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	4959      	ldr	r1, [pc, #356]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c90:	d101      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d017      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cae:	4b4e      	ldr	r3, [pc, #312]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	494a      	ldr	r1, [pc, #296]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 808b 	beq.w	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	4a39      	ldr	r2, [pc, #228]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d06:	6413      	str	r3, [r2, #64]	; 0x40
 8001d08:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d14:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a34      	ldr	r2, [pc, #208]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d20:	f7fe fff8 	bl	8000d14 <HAL_GetTick>
 8001d24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d28:	f7fe fff4 	bl	8000d14 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e38f      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d46:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d035      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d02e      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d86:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d114      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe ffbc 	bl	8000d14 <HAL_GetTick>
 8001d9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7fe ffb8 	bl	8000d14 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e351      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ee      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dce:	d111      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001dde:	400b      	ands	r3, r1
 8001de0:	4901      	ldr	r1, [pc, #4]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40007000 	.word	0x40007000
 8001df0:	0ffffcff 	.word	0x0ffffcff
 8001df4:	4bac      	ldr	r3, [pc, #688]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4aab      	ldr	r2, [pc, #684]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001dfe:	6093      	str	r3, [r2, #8]
 8001e00:	4ba9      	ldr	r3, [pc, #676]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	49a6      	ldr	r1, [pc, #664]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e1e:	4ba2      	ldr	r3, [pc, #648]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e24:	4aa0      	ldr	r2, [pc, #640]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e2e:	4b9e      	ldr	r3, [pc, #632]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	499b      	ldr	r1, [pc, #620]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e4c:	4b96      	ldr	r3, [pc, #600]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e5a:	4993      	ldr	r1, [pc, #588]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e6e:	4b8e      	ldr	r3, [pc, #568]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e7c:	498a      	ldr	r1, [pc, #552]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e90:	4b85      	ldr	r3, [pc, #532]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e9e:	4982      	ldr	r1, [pc, #520]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001eb2:	4b7d      	ldr	r3, [pc, #500]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	4979      	ldr	r1, [pc, #484]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00a      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed4:	4b74      	ldr	r3, [pc, #464]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4971      	ldr	r1, [pc, #452]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00a      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ef6:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	f023 020c 	bic.w	r2, r3, #12
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f04:	4968      	ldr	r1, [pc, #416]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00a      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f18:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	4960      	ldr	r1, [pc, #384]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f48:	4957      	ldr	r1, [pc, #348]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f5c:	4b52      	ldr	r3, [pc, #328]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	494f      	ldr	r1, [pc, #316]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4946      	ldr	r1, [pc, #280]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fa0:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	493e      	ldr	r1, [pc, #248]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd0:	4935      	ldr	r1, [pc, #212]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ff2:	492d      	ldr	r1, [pc, #180]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d011      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002014:	4924      	ldr	r1, [pc, #144]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002024:	d101      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	4914      	ldr	r1, [pc, #80]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00b      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002078:	490b      	ldr	r1, [pc, #44]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00f      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800209c:	4902      	ldr	r1, [pc, #8]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020a4:	e002      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020b8:	4b8a      	ldr	r3, [pc, #552]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	4986      	ldr	r1, [pc, #536]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80020dc:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ec:	497d      	ldr	r1, [pc, #500]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d006      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80d6 	beq.w	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002108:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a75      	ldr	r2, [pc, #468]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800210e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002114:	f7fe fdfe 	bl	8000d14 <HAL_GetTick>
 8002118:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800211c:	f7fe fdfa 	bl	8000d14 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e195      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800212e:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d021      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11d      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800215c:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002162:	0e1b      	lsrs	r3, r3, #24
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	019a      	lsls	r2, r3, #6
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	041b      	lsls	r3, r3, #16
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	071b      	lsls	r3, r3, #28
 8002182:	4958      	ldr	r1, [pc, #352]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d02e      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b4:	d129      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021b6:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021c4:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ca:	0f1b      	lsrs	r3, r3, #28
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	019a      	lsls	r2, r3, #6
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	041b      	lsls	r3, r3, #16
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	061b      	lsls	r3, r3, #24
 80021e4:	431a      	orrs	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	071b      	lsls	r3, r3, #28
 80021ea:	493e      	ldr	r1, [pc, #248]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f8:	f023 021f 	bic.w	r2, r3, #31
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	3b01      	subs	r3, #1
 8002202:	4938      	ldr	r1, [pc, #224]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01d      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221c:	0e1b      	lsrs	r3, r3, #24
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002224:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800222a:	0f1b      	lsrs	r3, r3, #28
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	019a      	lsls	r2, r3, #6
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	061b      	lsls	r3, r3, #24
 8002244:	431a      	orrs	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	071b      	lsls	r3, r3, #28
 800224a:	4926      	ldr	r1, [pc, #152]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d011      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	019a      	lsls	r2, r3, #6
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	071b      	lsls	r3, r3, #28
 800227a:	491a      	ldr	r1, [pc, #104]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002288:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800228c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228e:	f7fe fd41 	bl	8000d14 <HAL_GetTick>
 8002292:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002296:	f7fe fd3d 	bl	8000d14 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0d8      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	f040 80ce 	bne.w	8002458 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a08      	ldr	r2, [pc, #32]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c8:	f7fe fd24 	bl	8000d14 <HAL_GetTick>
 80022cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022ce:	e00b      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022d0:	f7fe fd20 	bl	8000d14 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d904      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0bb      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022e8:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f4:	d0ec      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002312:	2b00      	cmp	r3, #0
 8002314:	d02e      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d12a      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800231e:	4b51      	ldr	r3, [pc, #324]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800232c:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	0f1b      	lsrs	r3, r3, #28
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	019a      	lsls	r2, r3, #6
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	061b      	lsls	r3, r3, #24
 800234c:	431a      	orrs	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	071b      	lsls	r3, r3, #28
 8002352:	4944      	ldr	r1, [pc, #272]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002360:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	3b01      	subs	r3, #1
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	493d      	ldr	r1, [pc, #244]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d022      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002388:	d11d      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800238a:	4b36      	ldr	r3, [pc, #216]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	0e1b      	lsrs	r3, r3, #24
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002398:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	0f1b      	lsrs	r3, r3, #28
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	019a      	lsls	r2, r3, #6
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	061b      	lsls	r3, r3, #24
 80023b8:	431a      	orrs	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	071b      	lsls	r3, r3, #28
 80023be:	4929      	ldr	r1, [pc, #164]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d028      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	0e1b      	lsrs	r3, r3, #24
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023e0:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	019a      	lsls	r2, r3, #6
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	431a      	orrs	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	071b      	lsls	r3, r3, #28
 8002406:	4917      	ldr	r1, [pc, #92]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	4911      	ldr	r1, [pc, #68]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002430:	f7fe fc70 	bl	8000d14 <HAL_GetTick>
 8002434:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002438:	f7fe fc6c 	bl	8000d14 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e007      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002456:	d1ef      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800

08002468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e049      	b.n	800250e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe faf6 	bl	8000a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3304      	adds	r3, #4
 80024a4:	4619      	mov	r1, r3
 80024a6:	4610      	mov	r0, r2
 80024a8:	f000 faca 	bl	8002a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e054      	b.n	80025da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d022      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d01d      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a22      	ldr	r2, [pc, #136]	; (80025ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d018      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00e      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <HAL_TIM_Base_Start_IT+0xe4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x80>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_TIM_Base_Start_IT+0xe8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d115      	bne.n	80025c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_TIM_Base_Start_IT+0xec>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d015      	beq.n	80025d6 <HAL_TIM_Base_Start_IT+0xbe>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d011      	beq.n	80025d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c2:	e008      	b.n	80025d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e000      	b.n	80025d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40000c00 	.word	0x40000c00
 80025f8:	40010400 	.word	0x40010400
 80025fc:	40014000 	.word	0x40014000
 8002600:	40001800 	.word	0x40001800
 8002604:	00010007 	.word	0x00010007

08002608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d122      	bne.n	8002664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b02      	cmp	r3, #2
 800262a:	d11b      	bne.n	8002664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0202 	mvn.w	r2, #2
 8002634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f9da 	bl	8002a04 <HAL_TIM_IC_CaptureCallback>
 8002650:	e005      	b.n	800265e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9cc 	bl	80029f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f9dd 	bl	8002a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b04      	cmp	r3, #4
 8002670:	d122      	bne.n	80026b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d11b      	bne.n	80026b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0204 	mvn.w	r2, #4
 8002688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f9b0 	bl	8002a04 <HAL_TIM_IC_CaptureCallback>
 80026a4:	e005      	b.n	80026b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f9a2 	bl	80029f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f9b3 	bl	8002a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d122      	bne.n	800270c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d11b      	bne.n	800270c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0208 	mvn.w	r2, #8
 80026dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2204      	movs	r2, #4
 80026e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f986 	bl	8002a04 <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f978 	bl	80029f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f989 	bl	8002a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b10      	cmp	r3, #16
 8002718:	d122      	bne.n	8002760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b10      	cmp	r3, #16
 8002726:	d11b      	bne.n	8002760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0210 	mvn.w	r2, #16
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2208      	movs	r2, #8
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f95c 	bl	8002a04 <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f94e 	bl	80029f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f95f 	bl	8002a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10e      	bne.n	800278c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0201 	mvn.w	r2, #1
 8002784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f928 	bl	80029dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b80      	cmp	r3, #128	; 0x80
 8002798:	d10e      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d107      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fb16 	bl	8002de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c6:	d10e      	bne.n	80027e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b80      	cmp	r3, #128	; 0x80
 80027d4:	d107      	bne.n	80027e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fb09 	bl	8002df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d10e      	bne.n	8002812 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d107      	bne.n	8002812 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800280a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f90d 	bl	8002a2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b20      	cmp	r3, #32
 800281e:	d10e      	bne.n	800283e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b20      	cmp	r3, #32
 800282c:	d107      	bne.n	800283e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0220 	mvn.w	r2, #32
 8002836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fac9 	bl	8002dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_TIM_ConfigClockSource+0x1c>
 8002860:	2302      	movs	r3, #2
 8002862:	e0b4      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x186>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_TIM_ConfigClockSource+0x190>)
 8002880:	4013      	ands	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800288a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289c:	d03e      	beq.n	800291c <HAL_TIM_ConfigClockSource+0xd4>
 800289e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a2:	f200 8087 	bhi.w	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	f000 8086 	beq.w	80029ba <HAL_TIM_ConfigClockSource+0x172>
 80028ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b2:	d87f      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b70      	cmp	r3, #112	; 0x70
 80028b6:	d01a      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0xa6>
 80028b8:	2b70      	cmp	r3, #112	; 0x70
 80028ba:	d87b      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d050      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x11a>
 80028c0:	2b60      	cmp	r3, #96	; 0x60
 80028c2:	d877      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b50      	cmp	r3, #80	; 0x50
 80028c6:	d03c      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0xfa>
 80028c8:	2b50      	cmp	r3, #80	; 0x50
 80028ca:	d873      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d058      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x13a>
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d86f      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028d4:	2b30      	cmp	r3, #48	; 0x30
 80028d6:	d064      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x15a>
 80028d8:	2b30      	cmp	r3, #48	; 0x30
 80028da:	d86b      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d060      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x15a>
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d867      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05c      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x15a>
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d05a      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x15a>
 80028ec:	e062      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6899      	ldr	r1, [r3, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f000 f9b9 	bl	8002c74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	609a      	str	r2, [r3, #8]
      break;
 800291a:	e04f      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f000 f9a2 	bl	8002c74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800293e:	609a      	str	r2, [r3, #8]
      break;
 8002940:	e03c      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	461a      	mov	r2, r3
 8002950:	f000 f916 	bl	8002b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2150      	movs	r1, #80	; 0x50
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f96f 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002960:	e02c      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	461a      	mov	r2, r3
 8002970:	f000 f935 	bl	8002bde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2160      	movs	r1, #96	; 0x60
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f95f 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002980:	e01c      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	461a      	mov	r2, r3
 8002990:	f000 f8f6 	bl	8002b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f94f 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 80029a0:	e00c      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f000 f946 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 80029b2:	e003      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      break;
 80029b8:	e000      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	fffeff88 	.word	0xfffeff88

080029dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a40      	ldr	r2, [pc, #256]	; (8002b54 <TIM_Base_SetConfig+0x114>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d00f      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3d      	ldr	r2, [pc, #244]	; (8002b58 <TIM_Base_SetConfig+0x118>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00b      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3c      	ldr	r2, [pc, #240]	; (8002b5c <TIM_Base_SetConfig+0x11c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d007      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3b      	ldr	r2, [pc, #236]	; (8002b60 <TIM_Base_SetConfig+0x120>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d003      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3a      	ldr	r2, [pc, #232]	; (8002b64 <TIM_Base_SetConfig+0x124>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d108      	bne.n	8002a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a2f      	ldr	r2, [pc, #188]	; (8002b54 <TIM_Base_SetConfig+0x114>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d02b      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d027      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <TIM_Base_SetConfig+0x118>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d023      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a2b      	ldr	r2, [pc, #172]	; (8002b5c <TIM_Base_SetConfig+0x11c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01f      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2a      	ldr	r2, [pc, #168]	; (8002b60 <TIM_Base_SetConfig+0x120>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01b      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <TIM_Base_SetConfig+0x124>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d017      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a28      	ldr	r2, [pc, #160]	; (8002b68 <TIM_Base_SetConfig+0x128>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a27      	ldr	r2, [pc, #156]	; (8002b6c <TIM_Base_SetConfig+0x12c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00f      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <TIM_Base_SetConfig+0x130>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00b      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <TIM_Base_SetConfig+0x134>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <TIM_Base_SetConfig+0x138>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <TIM_Base_SetConfig+0x13c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d108      	bne.n	8002b04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <TIM_Base_SetConfig+0x114>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <TIM_Base_SetConfig+0xf8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <TIM_Base_SetConfig+0x124>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d103      	bne.n	8002b40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	615a      	str	r2, [r3, #20]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	40010400 	.word	0x40010400
 8002b68:	40014000 	.word	0x40014000
 8002b6c:	40014400 	.word	0x40014400
 8002b70:	40014800 	.word	0x40014800
 8002b74:	40001800 	.word	0x40001800
 8002b78:	40001c00 	.word	0x40001c00
 8002b7c:	40002000 	.word	0x40002000

08002b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0201 	bic.w	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f023 030a 	bic.w	r3, r3, #10
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	621a      	str	r2, [r3, #32]
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b087      	sub	sp, #28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	f023 0210 	bic.w	r2, r3, #16
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	031b      	lsls	r3, r3, #12
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f043 0307 	orr.w	r3, r3, #7
 8002c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	021a      	lsls	r2, r3, #8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	609a      	str	r2, [r3, #8]
}
 8002ca8:	bf00      	nop
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e06d      	b.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a2f      	ldr	r2, [pc, #188]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d108      	bne.n	8002d12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a20      	ldr	r2, [pc, #128]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d022      	beq.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3e:	d01d      	beq.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d018      	beq.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d013      	beq.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00e      	beq.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d009      	beq.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d004      	beq.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d10c      	bne.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40010400 	.word	0x40010400
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40001800 	.word	0x40001800

08002dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e040      	b.n	8002ea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fd fe96 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f8c0 	bl	8002fd0 <UART_SetConfig>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e022      	b.n	8002ea0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fb18 	bl	8003498 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fb9f 	bl	80035dc <UART_CheckIdleState>
 8002e9e:	4603      	mov	r3, r0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	f040 8081 	bne.w	8002fc4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HAL_UART_Transmit+0x26>
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e079      	b.n	8002fc6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_UART_Transmit+0x38>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e072      	b.n	8002fc6 <HAL_UART_Transmit+0x11e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2221      	movs	r2, #33	; 0x21
 8002ef4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ef6:	f7fd ff0d 	bl	8000d14 <HAL_GetTick>
 8002efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	88fa      	ldrh	r2, [r7, #6]
 8002f00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f14:	d108      	bne.n	8002f28 <HAL_UART_Transmit+0x80>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d104      	bne.n	8002f28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	e003      	b.n	8002f30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f38:	e02c      	b.n	8002f94 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fb92 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e038      	b.n	8002fc6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10b      	bne.n	8002f72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	e007      	b.n	8002f82 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1cc      	bne.n	8002f3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2140      	movs	r1, #64	; 0x40
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fb5f 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e005      	b.n	8002fc6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e000      	b.n	8002fc6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4ba6      	ldr	r3, [pc, #664]	; (8003294 <UART_SetConfig+0x2c4>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	6979      	ldr	r1, [r7, #20]
 8003004:	430b      	orrs	r3, r1
 8003006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	430a      	orrs	r2, r1
 8003040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a94      	ldr	r2, [pc, #592]	; (8003298 <UART_SetConfig+0x2c8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d120      	bne.n	800308e <UART_SetConfig+0xbe>
 800304c:	4b93      	ldr	r3, [pc, #588]	; (800329c <UART_SetConfig+0x2cc>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b03      	cmp	r3, #3
 8003058:	d816      	bhi.n	8003088 <UART_SetConfig+0xb8>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <UART_SetConfig+0x90>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003071 	.word	0x08003071
 8003064:	0800307d 	.word	0x0800307d
 8003068:	08003077 	.word	0x08003077
 800306c:	08003083 	.word	0x08003083
 8003070:	2301      	movs	r3, #1
 8003072:	77fb      	strb	r3, [r7, #31]
 8003074:	e150      	b.n	8003318 <UART_SetConfig+0x348>
 8003076:	2302      	movs	r3, #2
 8003078:	77fb      	strb	r3, [r7, #31]
 800307a:	e14d      	b.n	8003318 <UART_SetConfig+0x348>
 800307c:	2304      	movs	r3, #4
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e14a      	b.n	8003318 <UART_SetConfig+0x348>
 8003082:	2308      	movs	r3, #8
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e147      	b.n	8003318 <UART_SetConfig+0x348>
 8003088:	2310      	movs	r3, #16
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e144      	b.n	8003318 <UART_SetConfig+0x348>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <UART_SetConfig+0x2d0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d132      	bne.n	80030fe <UART_SetConfig+0x12e>
 8003098:	4b80      	ldr	r3, [pc, #512]	; (800329c <UART_SetConfig+0x2cc>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d828      	bhi.n	80030f8 <UART_SetConfig+0x128>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0xdc>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	080030f9 	.word	0x080030f9
 80030b4:	080030f9 	.word	0x080030f9
 80030b8:	080030f9 	.word	0x080030f9
 80030bc:	080030ed 	.word	0x080030ed
 80030c0:	080030f9 	.word	0x080030f9
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080030f9 	.word	0x080030f9
 80030cc:	080030e7 	.word	0x080030e7
 80030d0:	080030f9 	.word	0x080030f9
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	080030f9 	.word	0x080030f9
 80030dc:	080030f3 	.word	0x080030f3
 80030e0:	2300      	movs	r3, #0
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e118      	b.n	8003318 <UART_SetConfig+0x348>
 80030e6:	2302      	movs	r3, #2
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e115      	b.n	8003318 <UART_SetConfig+0x348>
 80030ec:	2304      	movs	r3, #4
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e112      	b.n	8003318 <UART_SetConfig+0x348>
 80030f2:	2308      	movs	r3, #8
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e10f      	b.n	8003318 <UART_SetConfig+0x348>
 80030f8:	2310      	movs	r3, #16
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e10c      	b.n	8003318 <UART_SetConfig+0x348>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a68      	ldr	r2, [pc, #416]	; (80032a4 <UART_SetConfig+0x2d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d120      	bne.n	800314a <UART_SetConfig+0x17a>
 8003108:	4b64      	ldr	r3, [pc, #400]	; (800329c <UART_SetConfig+0x2cc>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003112:	2b30      	cmp	r3, #48	; 0x30
 8003114:	d013      	beq.n	800313e <UART_SetConfig+0x16e>
 8003116:	2b30      	cmp	r3, #48	; 0x30
 8003118:	d814      	bhi.n	8003144 <UART_SetConfig+0x174>
 800311a:	2b20      	cmp	r3, #32
 800311c:	d009      	beq.n	8003132 <UART_SetConfig+0x162>
 800311e:	2b20      	cmp	r3, #32
 8003120:	d810      	bhi.n	8003144 <UART_SetConfig+0x174>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <UART_SetConfig+0x15c>
 8003126:	2b10      	cmp	r3, #16
 8003128:	d006      	beq.n	8003138 <UART_SetConfig+0x168>
 800312a:	e00b      	b.n	8003144 <UART_SetConfig+0x174>
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e0f2      	b.n	8003318 <UART_SetConfig+0x348>
 8003132:	2302      	movs	r3, #2
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e0ef      	b.n	8003318 <UART_SetConfig+0x348>
 8003138:	2304      	movs	r3, #4
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e0ec      	b.n	8003318 <UART_SetConfig+0x348>
 800313e:	2308      	movs	r3, #8
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e0e9      	b.n	8003318 <UART_SetConfig+0x348>
 8003144:	2310      	movs	r3, #16
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e0e6      	b.n	8003318 <UART_SetConfig+0x348>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a56      	ldr	r2, [pc, #344]	; (80032a8 <UART_SetConfig+0x2d8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d120      	bne.n	8003196 <UART_SetConfig+0x1c6>
 8003154:	4b51      	ldr	r3, [pc, #324]	; (800329c <UART_SetConfig+0x2cc>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800315e:	2bc0      	cmp	r3, #192	; 0xc0
 8003160:	d013      	beq.n	800318a <UART_SetConfig+0x1ba>
 8003162:	2bc0      	cmp	r3, #192	; 0xc0
 8003164:	d814      	bhi.n	8003190 <UART_SetConfig+0x1c0>
 8003166:	2b80      	cmp	r3, #128	; 0x80
 8003168:	d009      	beq.n	800317e <UART_SetConfig+0x1ae>
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d810      	bhi.n	8003190 <UART_SetConfig+0x1c0>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <UART_SetConfig+0x1a8>
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d006      	beq.n	8003184 <UART_SetConfig+0x1b4>
 8003176:	e00b      	b.n	8003190 <UART_SetConfig+0x1c0>
 8003178:	2300      	movs	r3, #0
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e0cc      	b.n	8003318 <UART_SetConfig+0x348>
 800317e:	2302      	movs	r3, #2
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e0c9      	b.n	8003318 <UART_SetConfig+0x348>
 8003184:	2304      	movs	r3, #4
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e0c6      	b.n	8003318 <UART_SetConfig+0x348>
 800318a:	2308      	movs	r3, #8
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e0c3      	b.n	8003318 <UART_SetConfig+0x348>
 8003190:	2310      	movs	r3, #16
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e0c0      	b.n	8003318 <UART_SetConfig+0x348>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a44      	ldr	r2, [pc, #272]	; (80032ac <UART_SetConfig+0x2dc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d125      	bne.n	80031ec <UART_SetConfig+0x21c>
 80031a0:	4b3e      	ldr	r3, [pc, #248]	; (800329c <UART_SetConfig+0x2cc>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ae:	d017      	beq.n	80031e0 <UART_SetConfig+0x210>
 80031b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b4:	d817      	bhi.n	80031e6 <UART_SetConfig+0x216>
 80031b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ba:	d00b      	beq.n	80031d4 <UART_SetConfig+0x204>
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c0:	d811      	bhi.n	80031e6 <UART_SetConfig+0x216>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <UART_SetConfig+0x1fe>
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ca:	d006      	beq.n	80031da <UART_SetConfig+0x20a>
 80031cc:	e00b      	b.n	80031e6 <UART_SetConfig+0x216>
 80031ce:	2300      	movs	r3, #0
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e0a1      	b.n	8003318 <UART_SetConfig+0x348>
 80031d4:	2302      	movs	r3, #2
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e09e      	b.n	8003318 <UART_SetConfig+0x348>
 80031da:	2304      	movs	r3, #4
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e09b      	b.n	8003318 <UART_SetConfig+0x348>
 80031e0:	2308      	movs	r3, #8
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e098      	b.n	8003318 <UART_SetConfig+0x348>
 80031e6:	2310      	movs	r3, #16
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e095      	b.n	8003318 <UART_SetConfig+0x348>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2f      	ldr	r2, [pc, #188]	; (80032b0 <UART_SetConfig+0x2e0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d125      	bne.n	8003242 <UART_SetConfig+0x272>
 80031f6:	4b29      	ldr	r3, [pc, #164]	; (800329c <UART_SetConfig+0x2cc>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003204:	d017      	beq.n	8003236 <UART_SetConfig+0x266>
 8003206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800320a:	d817      	bhi.n	800323c <UART_SetConfig+0x26c>
 800320c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003210:	d00b      	beq.n	800322a <UART_SetConfig+0x25a>
 8003212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003216:	d811      	bhi.n	800323c <UART_SetConfig+0x26c>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <UART_SetConfig+0x254>
 800321c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003220:	d006      	beq.n	8003230 <UART_SetConfig+0x260>
 8003222:	e00b      	b.n	800323c <UART_SetConfig+0x26c>
 8003224:	2301      	movs	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e076      	b.n	8003318 <UART_SetConfig+0x348>
 800322a:	2302      	movs	r3, #2
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e073      	b.n	8003318 <UART_SetConfig+0x348>
 8003230:	2304      	movs	r3, #4
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e070      	b.n	8003318 <UART_SetConfig+0x348>
 8003236:	2308      	movs	r3, #8
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e06d      	b.n	8003318 <UART_SetConfig+0x348>
 800323c:	2310      	movs	r3, #16
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e06a      	b.n	8003318 <UART_SetConfig+0x348>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <UART_SetConfig+0x2e4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d138      	bne.n	80032be <UART_SetConfig+0x2ee>
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <UART_SetConfig+0x2cc>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003256:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800325a:	d017      	beq.n	800328c <UART_SetConfig+0x2bc>
 800325c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003260:	d82a      	bhi.n	80032b8 <UART_SetConfig+0x2e8>
 8003262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003266:	d00b      	beq.n	8003280 <UART_SetConfig+0x2b0>
 8003268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326c:	d824      	bhi.n	80032b8 <UART_SetConfig+0x2e8>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <UART_SetConfig+0x2aa>
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003276:	d006      	beq.n	8003286 <UART_SetConfig+0x2b6>
 8003278:	e01e      	b.n	80032b8 <UART_SetConfig+0x2e8>
 800327a:	2300      	movs	r3, #0
 800327c:	77fb      	strb	r3, [r7, #31]
 800327e:	e04b      	b.n	8003318 <UART_SetConfig+0x348>
 8003280:	2302      	movs	r3, #2
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e048      	b.n	8003318 <UART_SetConfig+0x348>
 8003286:	2304      	movs	r3, #4
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e045      	b.n	8003318 <UART_SetConfig+0x348>
 800328c:	2308      	movs	r3, #8
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e042      	b.n	8003318 <UART_SetConfig+0x348>
 8003292:	bf00      	nop
 8003294:	efff69f3 	.word	0xefff69f3
 8003298:	40011000 	.word	0x40011000
 800329c:	40023800 	.word	0x40023800
 80032a0:	40004400 	.word	0x40004400
 80032a4:	40004800 	.word	0x40004800
 80032a8:	40004c00 	.word	0x40004c00
 80032ac:	40005000 	.word	0x40005000
 80032b0:	40011400 	.word	0x40011400
 80032b4:	40007800 	.word	0x40007800
 80032b8:	2310      	movs	r3, #16
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e02c      	b.n	8003318 <UART_SetConfig+0x348>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a72      	ldr	r2, [pc, #456]	; (800348c <UART_SetConfig+0x4bc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d125      	bne.n	8003314 <UART_SetConfig+0x344>
 80032c8:	4b71      	ldr	r3, [pc, #452]	; (8003490 <UART_SetConfig+0x4c0>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032d6:	d017      	beq.n	8003308 <UART_SetConfig+0x338>
 80032d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032dc:	d817      	bhi.n	800330e <UART_SetConfig+0x33e>
 80032de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e2:	d00b      	beq.n	80032fc <UART_SetConfig+0x32c>
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e8:	d811      	bhi.n	800330e <UART_SetConfig+0x33e>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <UART_SetConfig+0x326>
 80032ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f2:	d006      	beq.n	8003302 <UART_SetConfig+0x332>
 80032f4:	e00b      	b.n	800330e <UART_SetConfig+0x33e>
 80032f6:	2300      	movs	r3, #0
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e00d      	b.n	8003318 <UART_SetConfig+0x348>
 80032fc:	2302      	movs	r3, #2
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e00a      	b.n	8003318 <UART_SetConfig+0x348>
 8003302:	2304      	movs	r3, #4
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e007      	b.n	8003318 <UART_SetConfig+0x348>
 8003308:	2308      	movs	r3, #8
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e004      	b.n	8003318 <UART_SetConfig+0x348>
 800330e:	2310      	movs	r3, #16
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e001      	b.n	8003318 <UART_SetConfig+0x348>
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003320:	d15b      	bne.n	80033da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d828      	bhi.n	800337a <UART_SetConfig+0x3aa>
 8003328:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <UART_SetConfig+0x360>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003355 	.word	0x08003355
 8003334:	0800335d 	.word	0x0800335d
 8003338:	08003365 	.word	0x08003365
 800333c:	0800337b 	.word	0x0800337b
 8003340:	0800336b 	.word	0x0800336b
 8003344:	0800337b 	.word	0x0800337b
 8003348:	0800337b 	.word	0x0800337b
 800334c:	0800337b 	.word	0x0800337b
 8003350:	08003373 	.word	0x08003373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003354:	f7fe fc38 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8003358:	61b8      	str	r0, [r7, #24]
        break;
 800335a:	e013      	b.n	8003384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800335c:	f7fe fc48 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 8003360:	61b8      	str	r0, [r7, #24]
        break;
 8003362:	e00f      	b.n	8003384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003364:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <UART_SetConfig+0x4c4>)
 8003366:	61bb      	str	r3, [r7, #24]
        break;
 8003368:	e00c      	b.n	8003384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336a:	f7fe fb5b 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 800336e:	61b8      	str	r0, [r7, #24]
        break;
 8003370:	e008      	b.n	8003384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003376:	61bb      	str	r3, [r7, #24]
        break;
 8003378:	e004      	b.n	8003384 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	77bb      	strb	r3, [r7, #30]
        break;
 8003382:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d074      	beq.n	8003474 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	005a      	lsls	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	441a      	add	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	d916      	bls.n	80033d4 <UART_SetConfig+0x404>
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d212      	bcs.n	80033d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f023 030f 	bic.w	r3, r3, #15
 80033b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	89fa      	ldrh	r2, [r7, #14]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	e04f      	b.n	8003474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	77bb      	strb	r3, [r7, #30]
 80033d8:	e04c      	b.n	8003474 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033da:	7ffb      	ldrb	r3, [r7, #31]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d828      	bhi.n	8003432 <UART_SetConfig+0x462>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <UART_SetConfig+0x418>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800340d 	.word	0x0800340d
 80033ec:	08003415 	.word	0x08003415
 80033f0:	0800341d 	.word	0x0800341d
 80033f4:	08003433 	.word	0x08003433
 80033f8:	08003423 	.word	0x08003423
 80033fc:	08003433 	.word	0x08003433
 8003400:	08003433 	.word	0x08003433
 8003404:	08003433 	.word	0x08003433
 8003408:	0800342b 	.word	0x0800342b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800340c:	f7fe fbdc 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8003410:	61b8      	str	r0, [r7, #24]
        break;
 8003412:	e013      	b.n	800343c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003414:	f7fe fbec 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 8003418:	61b8      	str	r0, [r7, #24]
        break;
 800341a:	e00f      	b.n	800343c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <UART_SetConfig+0x4c4>)
 800341e:	61bb      	str	r3, [r7, #24]
        break;
 8003420:	e00c      	b.n	800343c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003422:	f7fe faff 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 8003426:	61b8      	str	r0, [r7, #24]
        break;
 8003428:	e008      	b.n	800343c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800342a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342e:	61bb      	str	r3, [r7, #24]
        break;
 8003430:	e004      	b.n	800343c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	77bb      	strb	r3, [r7, #30]
        break;
 800343a:	bf00      	nop
    }

    if (pclk != 0U)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d018      	beq.n	8003474 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	085a      	lsrs	r2, r3, #1
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d909      	bls.n	8003470 <UART_SetConfig+0x4a0>
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003462:	d205      	bcs.n	8003470 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	b29a      	uxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	e001      	b.n	8003474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003480:	7fbb      	ldrb	r3, [r7, #30]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40007c00 	.word	0x40007c00
 8003490:	40023800 	.word	0x40023800
 8003494:	00f42400 	.word	0x00f42400

08003498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01a      	beq.n	80035ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003596:	d10a      	bne.n	80035ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035ec:	f7fd fb92 	bl	8000d14 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d10e      	bne.n	800361e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f82d 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e023      	b.n	8003666 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b04      	cmp	r3, #4
 800362a:	d10e      	bne.n	800364a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f817 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e00d      	b.n	8003666 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b09c      	sub	sp, #112	; 0x70
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367e:	e0a5      	b.n	80037cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	f000 80a1 	beq.w	80037cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7fd fb43 	bl	8000d14 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800369a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369c:	2b00      	cmp	r3, #0
 800369e:	d13e      	bne.n	800371e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036b4:	667b      	str	r3, [r7, #100]	; 0x64
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e6      	bne.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3308      	adds	r3, #8
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	663b      	str	r3, [r7, #96]	; 0x60
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3308      	adds	r3, #8
 80036f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e067      	b.n	80037ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d04f      	beq.n	80037cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373a:	d147      	bne.n	80037cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003744:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800375a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
 8003766:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800376a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e6      	bne.n	8003746 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3308      	adds	r3, #8
 800377e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	613b      	str	r3, [r7, #16]
   return(result);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3308      	adds	r3, #8
 8003796:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003798:	623a      	str	r2, [r7, #32]
 800379a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	69f9      	ldr	r1, [r7, #28]
 800379e:	6a3a      	ldr	r2, [r7, #32]
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e5      	bne.n	8003778 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e010      	b.n	80037ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4013      	ands	r3, r2
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	f43f af4a 	beq.w	8003680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3770      	adds	r7, #112	; 0x70
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <__errno>:
 80037f8:	4b01      	ldr	r3, [pc, #4]	; (8003800 <__errno+0x8>)
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	2000000c 	.word	0x2000000c

08003804 <__libc_init_array>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4d0d      	ldr	r5, [pc, #52]	; (800383c <__libc_init_array+0x38>)
 8003808:	4c0d      	ldr	r4, [pc, #52]	; (8003840 <__libc_init_array+0x3c>)
 800380a:	1b64      	subs	r4, r4, r5
 800380c:	10a4      	asrs	r4, r4, #2
 800380e:	2600      	movs	r6, #0
 8003810:	42a6      	cmp	r6, r4
 8003812:	d109      	bne.n	8003828 <__libc_init_array+0x24>
 8003814:	4d0b      	ldr	r5, [pc, #44]	; (8003844 <__libc_init_array+0x40>)
 8003816:	4c0c      	ldr	r4, [pc, #48]	; (8003848 <__libc_init_array+0x44>)
 8003818:	f000 fcc2 	bl	80041a0 <_init>
 800381c:	1b64      	subs	r4, r4, r5
 800381e:	10a4      	asrs	r4, r4, #2
 8003820:	2600      	movs	r6, #0
 8003822:	42a6      	cmp	r6, r4
 8003824:	d105      	bne.n	8003832 <__libc_init_array+0x2e>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	f855 3b04 	ldr.w	r3, [r5], #4
 800382c:	4798      	blx	r3
 800382e:	3601      	adds	r6, #1
 8003830:	e7ee      	b.n	8003810 <__libc_init_array+0xc>
 8003832:	f855 3b04 	ldr.w	r3, [r5], #4
 8003836:	4798      	blx	r3
 8003838:	3601      	adds	r6, #1
 800383a:	e7f2      	b.n	8003822 <__libc_init_array+0x1e>
 800383c:	08004220 	.word	0x08004220
 8003840:	08004220 	.word	0x08004220
 8003844:	08004220 	.word	0x08004220
 8003848:	08004224 	.word	0x08004224

0800384c <memset>:
 800384c:	4402      	add	r2, r0
 800384e:	4603      	mov	r3, r0
 8003850:	4293      	cmp	r3, r2
 8003852:	d100      	bne.n	8003856 <memset+0xa>
 8003854:	4770      	bx	lr
 8003856:	f803 1b01 	strb.w	r1, [r3], #1
 800385a:	e7f9      	b.n	8003850 <memset+0x4>

0800385c <sniprintf>:
 800385c:	b40c      	push	{r2, r3}
 800385e:	b530      	push	{r4, r5, lr}
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <sniprintf+0x64>)
 8003862:	1e0c      	subs	r4, r1, #0
 8003864:	681d      	ldr	r5, [r3, #0]
 8003866:	b09d      	sub	sp, #116	; 0x74
 8003868:	da08      	bge.n	800387c <sniprintf+0x20>
 800386a:	238b      	movs	r3, #139	; 0x8b
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	f04f 30ff 	mov.w	r0, #4294967295
 8003872:	b01d      	add	sp, #116	; 0x74
 8003874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003878:	b002      	add	sp, #8
 800387a:	4770      	bx	lr
 800387c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003880:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003884:	bf14      	ite	ne
 8003886:	f104 33ff 	addne.w	r3, r4, #4294967295
 800388a:	4623      	moveq	r3, r4
 800388c:	9304      	str	r3, [sp, #16]
 800388e:	9307      	str	r3, [sp, #28]
 8003890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003894:	9002      	str	r0, [sp, #8]
 8003896:	9006      	str	r0, [sp, #24]
 8003898:	f8ad 3016 	strh.w	r3, [sp, #22]
 800389c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800389e:	ab21      	add	r3, sp, #132	; 0x84
 80038a0:	a902      	add	r1, sp, #8
 80038a2:	4628      	mov	r0, r5
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	f000 f889 	bl	80039bc <_svfiprintf_r>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	bfbc      	itt	lt
 80038ae:	238b      	movlt	r3, #139	; 0x8b
 80038b0:	602b      	strlt	r3, [r5, #0]
 80038b2:	2c00      	cmp	r4, #0
 80038b4:	d0dd      	beq.n	8003872 <sniprintf+0x16>
 80038b6:	9b02      	ldr	r3, [sp, #8]
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e7d9      	b.n	8003872 <sniprintf+0x16>
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c

080038c4 <siprintf>:
 80038c4:	b40e      	push	{r1, r2, r3}
 80038c6:	b500      	push	{lr}
 80038c8:	b09c      	sub	sp, #112	; 0x70
 80038ca:	ab1d      	add	r3, sp, #116	; 0x74
 80038cc:	9002      	str	r0, [sp, #8]
 80038ce:	9006      	str	r0, [sp, #24]
 80038d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038d4:	4809      	ldr	r0, [pc, #36]	; (80038fc <siprintf+0x38>)
 80038d6:	9107      	str	r1, [sp, #28]
 80038d8:	9104      	str	r1, [sp, #16]
 80038da:	4909      	ldr	r1, [pc, #36]	; (8003900 <siprintf+0x3c>)
 80038dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80038e0:	9105      	str	r1, [sp, #20]
 80038e2:	6800      	ldr	r0, [r0, #0]
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	a902      	add	r1, sp, #8
 80038e8:	f000 f868 	bl	80039bc <_svfiprintf_r>
 80038ec:	9b02      	ldr	r3, [sp, #8]
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	b01c      	add	sp, #112	; 0x70
 80038f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038f8:	b003      	add	sp, #12
 80038fa:	4770      	bx	lr
 80038fc:	2000000c 	.word	0x2000000c
 8003900:	ffff0208 	.word	0xffff0208

08003904 <__ssputs_r>:
 8003904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003908:	688e      	ldr	r6, [r1, #8]
 800390a:	429e      	cmp	r6, r3
 800390c:	4682      	mov	sl, r0
 800390e:	460c      	mov	r4, r1
 8003910:	4690      	mov	r8, r2
 8003912:	461f      	mov	r7, r3
 8003914:	d838      	bhi.n	8003988 <__ssputs_r+0x84>
 8003916:	898a      	ldrh	r2, [r1, #12]
 8003918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800391c:	d032      	beq.n	8003984 <__ssputs_r+0x80>
 800391e:	6825      	ldr	r5, [r4, #0]
 8003920:	6909      	ldr	r1, [r1, #16]
 8003922:	eba5 0901 	sub.w	r9, r5, r1
 8003926:	6965      	ldr	r5, [r4, #20]
 8003928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800392c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003930:	3301      	adds	r3, #1
 8003932:	444b      	add	r3, r9
 8003934:	106d      	asrs	r5, r5, #1
 8003936:	429d      	cmp	r5, r3
 8003938:	bf38      	it	cc
 800393a:	461d      	movcc	r5, r3
 800393c:	0553      	lsls	r3, r2, #21
 800393e:	d531      	bpl.n	80039a4 <__ssputs_r+0xa0>
 8003940:	4629      	mov	r1, r5
 8003942:	f000 fb63 	bl	800400c <_malloc_r>
 8003946:	4606      	mov	r6, r0
 8003948:	b950      	cbnz	r0, 8003960 <__ssputs_r+0x5c>
 800394a:	230c      	movs	r3, #12
 800394c:	f8ca 3000 	str.w	r3, [sl]
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003956:	81a3      	strh	r3, [r4, #12]
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003960:	6921      	ldr	r1, [r4, #16]
 8003962:	464a      	mov	r2, r9
 8003964:	f000 fabe 	bl	8003ee4 <memcpy>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800396e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	6126      	str	r6, [r4, #16]
 8003976:	6165      	str	r5, [r4, #20]
 8003978:	444e      	add	r6, r9
 800397a:	eba5 0509 	sub.w	r5, r5, r9
 800397e:	6026      	str	r6, [r4, #0]
 8003980:	60a5      	str	r5, [r4, #8]
 8003982:	463e      	mov	r6, r7
 8003984:	42be      	cmp	r6, r7
 8003986:	d900      	bls.n	800398a <__ssputs_r+0x86>
 8003988:	463e      	mov	r6, r7
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	4632      	mov	r2, r6
 800398e:	4641      	mov	r1, r8
 8003990:	f000 fab6 	bl	8003f00 <memmove>
 8003994:	68a3      	ldr	r3, [r4, #8]
 8003996:	1b9b      	subs	r3, r3, r6
 8003998:	60a3      	str	r3, [r4, #8]
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	4433      	add	r3, r6
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	2000      	movs	r0, #0
 80039a2:	e7db      	b.n	800395c <__ssputs_r+0x58>
 80039a4:	462a      	mov	r2, r5
 80039a6:	f000 fba5 	bl	80040f4 <_realloc_r>
 80039aa:	4606      	mov	r6, r0
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d1e1      	bne.n	8003974 <__ssputs_r+0x70>
 80039b0:	6921      	ldr	r1, [r4, #16]
 80039b2:	4650      	mov	r0, sl
 80039b4:	f000 fabe 	bl	8003f34 <_free_r>
 80039b8:	e7c7      	b.n	800394a <__ssputs_r+0x46>
	...

080039bc <_svfiprintf_r>:
 80039bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c0:	4698      	mov	r8, r3
 80039c2:	898b      	ldrh	r3, [r1, #12]
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	b09d      	sub	sp, #116	; 0x74
 80039c8:	4607      	mov	r7, r0
 80039ca:	460d      	mov	r5, r1
 80039cc:	4614      	mov	r4, r2
 80039ce:	d50e      	bpl.n	80039ee <_svfiprintf_r+0x32>
 80039d0:	690b      	ldr	r3, [r1, #16]
 80039d2:	b963      	cbnz	r3, 80039ee <_svfiprintf_r+0x32>
 80039d4:	2140      	movs	r1, #64	; 0x40
 80039d6:	f000 fb19 	bl	800400c <_malloc_r>
 80039da:	6028      	str	r0, [r5, #0]
 80039dc:	6128      	str	r0, [r5, #16]
 80039de:	b920      	cbnz	r0, 80039ea <_svfiprintf_r+0x2e>
 80039e0:	230c      	movs	r3, #12
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	e0d1      	b.n	8003b8e <_svfiprintf_r+0x1d2>
 80039ea:	2340      	movs	r3, #64	; 0x40
 80039ec:	616b      	str	r3, [r5, #20]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9309      	str	r3, [sp, #36]	; 0x24
 80039f2:	2320      	movs	r3, #32
 80039f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80039fc:	2330      	movs	r3, #48	; 0x30
 80039fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ba8 <_svfiprintf_r+0x1ec>
 8003a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a06:	f04f 0901 	mov.w	r9, #1
 8003a0a:	4623      	mov	r3, r4
 8003a0c:	469a      	mov	sl, r3
 8003a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a12:	b10a      	cbz	r2, 8003a18 <_svfiprintf_r+0x5c>
 8003a14:	2a25      	cmp	r2, #37	; 0x25
 8003a16:	d1f9      	bne.n	8003a0c <_svfiprintf_r+0x50>
 8003a18:	ebba 0b04 	subs.w	fp, sl, r4
 8003a1c:	d00b      	beq.n	8003a36 <_svfiprintf_r+0x7a>
 8003a1e:	465b      	mov	r3, fp
 8003a20:	4622      	mov	r2, r4
 8003a22:	4629      	mov	r1, r5
 8003a24:	4638      	mov	r0, r7
 8003a26:	f7ff ff6d 	bl	8003904 <__ssputs_r>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	f000 80aa 	beq.w	8003b84 <_svfiprintf_r+0x1c8>
 8003a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a32:	445a      	add	r2, fp
 8003a34:	9209      	str	r2, [sp, #36]	; 0x24
 8003a36:	f89a 3000 	ldrb.w	r3, [sl]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80a2 	beq.w	8003b84 <_svfiprintf_r+0x1c8>
 8003a40:	2300      	movs	r3, #0
 8003a42:	f04f 32ff 	mov.w	r2, #4294967295
 8003a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a4a:	f10a 0a01 	add.w	sl, sl, #1
 8003a4e:	9304      	str	r3, [sp, #16]
 8003a50:	9307      	str	r3, [sp, #28]
 8003a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a56:	931a      	str	r3, [sp, #104]	; 0x68
 8003a58:	4654      	mov	r4, sl
 8003a5a:	2205      	movs	r2, #5
 8003a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a60:	4851      	ldr	r0, [pc, #324]	; (8003ba8 <_svfiprintf_r+0x1ec>)
 8003a62:	f7fc fbf5 	bl	8000250 <memchr>
 8003a66:	9a04      	ldr	r2, [sp, #16]
 8003a68:	b9d8      	cbnz	r0, 8003aa2 <_svfiprintf_r+0xe6>
 8003a6a:	06d0      	lsls	r0, r2, #27
 8003a6c:	bf44      	itt	mi
 8003a6e:	2320      	movmi	r3, #32
 8003a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a74:	0711      	lsls	r1, r2, #28
 8003a76:	bf44      	itt	mi
 8003a78:	232b      	movmi	r3, #43	; 0x2b
 8003a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a82:	2b2a      	cmp	r3, #42	; 0x2a
 8003a84:	d015      	beq.n	8003ab2 <_svfiprintf_r+0xf6>
 8003a86:	9a07      	ldr	r2, [sp, #28]
 8003a88:	4654      	mov	r4, sl
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f04f 0c0a 	mov.w	ip, #10
 8003a90:	4621      	mov	r1, r4
 8003a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a96:	3b30      	subs	r3, #48	; 0x30
 8003a98:	2b09      	cmp	r3, #9
 8003a9a:	d94e      	bls.n	8003b3a <_svfiprintf_r+0x17e>
 8003a9c:	b1b0      	cbz	r0, 8003acc <_svfiprintf_r+0x110>
 8003a9e:	9207      	str	r2, [sp, #28]
 8003aa0:	e014      	b.n	8003acc <_svfiprintf_r+0x110>
 8003aa2:	eba0 0308 	sub.w	r3, r0, r8
 8003aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	9304      	str	r3, [sp, #16]
 8003aae:	46a2      	mov	sl, r4
 8003ab0:	e7d2      	b.n	8003a58 <_svfiprintf_r+0x9c>
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	1d19      	adds	r1, r3, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	9103      	str	r1, [sp, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bfbb      	ittet	lt
 8003abe:	425b      	neglt	r3, r3
 8003ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ac4:	9307      	strge	r3, [sp, #28]
 8003ac6:	9307      	strlt	r3, [sp, #28]
 8003ac8:	bfb8      	it	lt
 8003aca:	9204      	strlt	r2, [sp, #16]
 8003acc:	7823      	ldrb	r3, [r4, #0]
 8003ace:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad0:	d10c      	bne.n	8003aec <_svfiprintf_r+0x130>
 8003ad2:	7863      	ldrb	r3, [r4, #1]
 8003ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad6:	d135      	bne.n	8003b44 <_svfiprintf_r+0x188>
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	1d1a      	adds	r2, r3, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	9203      	str	r2, [sp, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bfb8      	it	lt
 8003ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ae8:	3402      	adds	r4, #2
 8003aea:	9305      	str	r3, [sp, #20]
 8003aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003bb8 <_svfiprintf_r+0x1fc>
 8003af0:	7821      	ldrb	r1, [r4, #0]
 8003af2:	2203      	movs	r2, #3
 8003af4:	4650      	mov	r0, sl
 8003af6:	f7fc fbab 	bl	8000250 <memchr>
 8003afa:	b140      	cbz	r0, 8003b0e <_svfiprintf_r+0x152>
 8003afc:	2340      	movs	r3, #64	; 0x40
 8003afe:	eba0 000a 	sub.w	r0, r0, sl
 8003b02:	fa03 f000 	lsl.w	r0, r3, r0
 8003b06:	9b04      	ldr	r3, [sp, #16]
 8003b08:	4303      	orrs	r3, r0
 8003b0a:	3401      	adds	r4, #1
 8003b0c:	9304      	str	r3, [sp, #16]
 8003b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b12:	4826      	ldr	r0, [pc, #152]	; (8003bac <_svfiprintf_r+0x1f0>)
 8003b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b18:	2206      	movs	r2, #6
 8003b1a:	f7fc fb99 	bl	8000250 <memchr>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d038      	beq.n	8003b94 <_svfiprintf_r+0x1d8>
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <_svfiprintf_r+0x1f4>)
 8003b24:	bb1b      	cbnz	r3, 8003b6e <_svfiprintf_r+0x1b2>
 8003b26:	9b03      	ldr	r3, [sp, #12]
 8003b28:	3307      	adds	r3, #7
 8003b2a:	f023 0307 	bic.w	r3, r3, #7
 8003b2e:	3308      	adds	r3, #8
 8003b30:	9303      	str	r3, [sp, #12]
 8003b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b34:	4433      	add	r3, r6
 8003b36:	9309      	str	r3, [sp, #36]	; 0x24
 8003b38:	e767      	b.n	8003a0a <_svfiprintf_r+0x4e>
 8003b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b3e:	460c      	mov	r4, r1
 8003b40:	2001      	movs	r0, #1
 8003b42:	e7a5      	b.n	8003a90 <_svfiprintf_r+0xd4>
 8003b44:	2300      	movs	r3, #0
 8003b46:	3401      	adds	r4, #1
 8003b48:	9305      	str	r3, [sp, #20]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f04f 0c0a 	mov.w	ip, #10
 8003b50:	4620      	mov	r0, r4
 8003b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b56:	3a30      	subs	r2, #48	; 0x30
 8003b58:	2a09      	cmp	r2, #9
 8003b5a:	d903      	bls.n	8003b64 <_svfiprintf_r+0x1a8>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0c5      	beq.n	8003aec <_svfiprintf_r+0x130>
 8003b60:	9105      	str	r1, [sp, #20]
 8003b62:	e7c3      	b.n	8003aec <_svfiprintf_r+0x130>
 8003b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b68:	4604      	mov	r4, r0
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e7f0      	b.n	8003b50 <_svfiprintf_r+0x194>
 8003b6e:	ab03      	add	r3, sp, #12
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	462a      	mov	r2, r5
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <_svfiprintf_r+0x1f8>)
 8003b76:	a904      	add	r1, sp, #16
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f3af 8000 	nop.w
 8003b7e:	1c42      	adds	r2, r0, #1
 8003b80:	4606      	mov	r6, r0
 8003b82:	d1d6      	bne.n	8003b32 <_svfiprintf_r+0x176>
 8003b84:	89ab      	ldrh	r3, [r5, #12]
 8003b86:	065b      	lsls	r3, r3, #25
 8003b88:	f53f af2c 	bmi.w	80039e4 <_svfiprintf_r+0x28>
 8003b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b8e:	b01d      	add	sp, #116	; 0x74
 8003b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b94:	ab03      	add	r3, sp, #12
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	462a      	mov	r2, r5
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <_svfiprintf_r+0x1f8>)
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	f000 f87a 	bl	8003c98 <_printf_i>
 8003ba4:	e7eb      	b.n	8003b7e <_svfiprintf_r+0x1c2>
 8003ba6:	bf00      	nop
 8003ba8:	080041e4 	.word	0x080041e4
 8003bac:	080041ee 	.word	0x080041ee
 8003bb0:	00000000 	.word	0x00000000
 8003bb4:	08003905 	.word	0x08003905
 8003bb8:	080041ea 	.word	0x080041ea

08003bbc <_printf_common>:
 8003bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	4616      	mov	r6, r2
 8003bc2:	4699      	mov	r9, r3
 8003bc4:	688a      	ldr	r2, [r1, #8]
 8003bc6:	690b      	ldr	r3, [r1, #16]
 8003bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	bfb8      	it	lt
 8003bd0:	4613      	movlt	r3, r2
 8003bd2:	6033      	str	r3, [r6, #0]
 8003bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bd8:	4607      	mov	r7, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	b10a      	cbz	r2, 8003be2 <_printf_common+0x26>
 8003bde:	3301      	adds	r3, #1
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	0699      	lsls	r1, r3, #26
 8003be6:	bf42      	ittt	mi
 8003be8:	6833      	ldrmi	r3, [r6, #0]
 8003bea:	3302      	addmi	r3, #2
 8003bec:	6033      	strmi	r3, [r6, #0]
 8003bee:	6825      	ldr	r5, [r4, #0]
 8003bf0:	f015 0506 	ands.w	r5, r5, #6
 8003bf4:	d106      	bne.n	8003c04 <_printf_common+0x48>
 8003bf6:	f104 0a19 	add.w	sl, r4, #25
 8003bfa:	68e3      	ldr	r3, [r4, #12]
 8003bfc:	6832      	ldr	r2, [r6, #0]
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	42ab      	cmp	r3, r5
 8003c02:	dc26      	bgt.n	8003c52 <_printf_common+0x96>
 8003c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c08:	1e13      	subs	r3, r2, #0
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	bf18      	it	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	0692      	lsls	r2, r2, #26
 8003c12:	d42b      	bmi.n	8003c6c <_printf_common+0xb0>
 8003c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c18:	4649      	mov	r1, r9
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	47c0      	blx	r8
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d01e      	beq.n	8003c60 <_printf_common+0xa4>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	68e5      	ldr	r5, [r4, #12]
 8003c26:	6832      	ldr	r2, [r6, #0]
 8003c28:	f003 0306 	and.w	r3, r3, #6
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	bf08      	it	eq
 8003c30:	1aad      	subeq	r5, r5, r2
 8003c32:	68a3      	ldr	r3, [r4, #8]
 8003c34:	6922      	ldr	r2, [r4, #16]
 8003c36:	bf0c      	ite	eq
 8003c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c3c:	2500      	movne	r5, #0
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	bfc4      	itt	gt
 8003c42:	1a9b      	subgt	r3, r3, r2
 8003c44:	18ed      	addgt	r5, r5, r3
 8003c46:	2600      	movs	r6, #0
 8003c48:	341a      	adds	r4, #26
 8003c4a:	42b5      	cmp	r5, r6
 8003c4c:	d11a      	bne.n	8003c84 <_printf_common+0xc8>
 8003c4e:	2000      	movs	r0, #0
 8003c50:	e008      	b.n	8003c64 <_printf_common+0xa8>
 8003c52:	2301      	movs	r3, #1
 8003c54:	4652      	mov	r2, sl
 8003c56:	4649      	mov	r1, r9
 8003c58:	4638      	mov	r0, r7
 8003c5a:	47c0      	blx	r8
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d103      	bne.n	8003c68 <_printf_common+0xac>
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c68:	3501      	adds	r5, #1
 8003c6a:	e7c6      	b.n	8003bfa <_printf_common+0x3e>
 8003c6c:	18e1      	adds	r1, r4, r3
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	2030      	movs	r0, #48	; 0x30
 8003c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c76:	4422      	add	r2, r4
 8003c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c80:	3302      	adds	r3, #2
 8003c82:	e7c7      	b.n	8003c14 <_printf_common+0x58>
 8003c84:	2301      	movs	r3, #1
 8003c86:	4622      	mov	r2, r4
 8003c88:	4649      	mov	r1, r9
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	47c0      	blx	r8
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d0e6      	beq.n	8003c60 <_printf_common+0xa4>
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7d9      	b.n	8003c4a <_printf_common+0x8e>
	...

08003c98 <_printf_i>:
 8003c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9c:	7e0f      	ldrb	r7, [r1, #24]
 8003c9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ca0:	2f78      	cmp	r7, #120	; 0x78
 8003ca2:	4691      	mov	r9, r2
 8003ca4:	4680      	mov	r8, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	469a      	mov	sl, r3
 8003caa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cae:	d807      	bhi.n	8003cc0 <_printf_i+0x28>
 8003cb0:	2f62      	cmp	r7, #98	; 0x62
 8003cb2:	d80a      	bhi.n	8003cca <_printf_i+0x32>
 8003cb4:	2f00      	cmp	r7, #0
 8003cb6:	f000 80d8 	beq.w	8003e6a <_printf_i+0x1d2>
 8003cba:	2f58      	cmp	r7, #88	; 0x58
 8003cbc:	f000 80a3 	beq.w	8003e06 <_printf_i+0x16e>
 8003cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cc8:	e03a      	b.n	8003d40 <_printf_i+0xa8>
 8003cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cce:	2b15      	cmp	r3, #21
 8003cd0:	d8f6      	bhi.n	8003cc0 <_printf_i+0x28>
 8003cd2:	a101      	add	r1, pc, #4	; (adr r1, 8003cd8 <_printf_i+0x40>)
 8003cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d45 	.word	0x08003d45
 8003ce0:	08003cc1 	.word	0x08003cc1
 8003ce4:	08003cc1 	.word	0x08003cc1
 8003ce8:	08003cc1 	.word	0x08003cc1
 8003cec:	08003cc1 	.word	0x08003cc1
 8003cf0:	08003d45 	.word	0x08003d45
 8003cf4:	08003cc1 	.word	0x08003cc1
 8003cf8:	08003cc1 	.word	0x08003cc1
 8003cfc:	08003cc1 	.word	0x08003cc1
 8003d00:	08003cc1 	.word	0x08003cc1
 8003d04:	08003e51 	.word	0x08003e51
 8003d08:	08003d75 	.word	0x08003d75
 8003d0c:	08003e33 	.word	0x08003e33
 8003d10:	08003cc1 	.word	0x08003cc1
 8003d14:	08003cc1 	.word	0x08003cc1
 8003d18:	08003e73 	.word	0x08003e73
 8003d1c:	08003cc1 	.word	0x08003cc1
 8003d20:	08003d75 	.word	0x08003d75
 8003d24:	08003cc1 	.word	0x08003cc1
 8003d28:	08003cc1 	.word	0x08003cc1
 8003d2c:	08003e3b 	.word	0x08003e3b
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	602a      	str	r2, [r5, #0]
 8003d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0a3      	b.n	8003e8c <_printf_i+0x1f4>
 8003d44:	6820      	ldr	r0, [r4, #0]
 8003d46:	6829      	ldr	r1, [r5, #0]
 8003d48:	0606      	lsls	r6, r0, #24
 8003d4a:	f101 0304 	add.w	r3, r1, #4
 8003d4e:	d50a      	bpl.n	8003d66 <_printf_i+0xce>
 8003d50:	680e      	ldr	r6, [r1, #0]
 8003d52:	602b      	str	r3, [r5, #0]
 8003d54:	2e00      	cmp	r6, #0
 8003d56:	da03      	bge.n	8003d60 <_printf_i+0xc8>
 8003d58:	232d      	movs	r3, #45	; 0x2d
 8003d5a:	4276      	negs	r6, r6
 8003d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d60:	485e      	ldr	r0, [pc, #376]	; (8003edc <_printf_i+0x244>)
 8003d62:	230a      	movs	r3, #10
 8003d64:	e019      	b.n	8003d9a <_printf_i+0x102>
 8003d66:	680e      	ldr	r6, [r1, #0]
 8003d68:	602b      	str	r3, [r5, #0]
 8003d6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d6e:	bf18      	it	ne
 8003d70:	b236      	sxthne	r6, r6
 8003d72:	e7ef      	b.n	8003d54 <_printf_i+0xbc>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	6820      	ldr	r0, [r4, #0]
 8003d78:	1d19      	adds	r1, r3, #4
 8003d7a:	6029      	str	r1, [r5, #0]
 8003d7c:	0601      	lsls	r1, r0, #24
 8003d7e:	d501      	bpl.n	8003d84 <_printf_i+0xec>
 8003d80:	681e      	ldr	r6, [r3, #0]
 8003d82:	e002      	b.n	8003d8a <_printf_i+0xf2>
 8003d84:	0646      	lsls	r6, r0, #25
 8003d86:	d5fb      	bpl.n	8003d80 <_printf_i+0xe8>
 8003d88:	881e      	ldrh	r6, [r3, #0]
 8003d8a:	4854      	ldr	r0, [pc, #336]	; (8003edc <_printf_i+0x244>)
 8003d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d8e:	bf0c      	ite	eq
 8003d90:	2308      	moveq	r3, #8
 8003d92:	230a      	movne	r3, #10
 8003d94:	2100      	movs	r1, #0
 8003d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d9a:	6865      	ldr	r5, [r4, #4]
 8003d9c:	60a5      	str	r5, [r4, #8]
 8003d9e:	2d00      	cmp	r5, #0
 8003da0:	bfa2      	ittt	ge
 8003da2:	6821      	ldrge	r1, [r4, #0]
 8003da4:	f021 0104 	bicge.w	r1, r1, #4
 8003da8:	6021      	strge	r1, [r4, #0]
 8003daa:	b90e      	cbnz	r6, 8003db0 <_printf_i+0x118>
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	d04d      	beq.n	8003e4c <_printf_i+0x1b4>
 8003db0:	4615      	mov	r5, r2
 8003db2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003db6:	fb03 6711 	mls	r7, r3, r1, r6
 8003dba:	5dc7      	ldrb	r7, [r0, r7]
 8003dbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dc0:	4637      	mov	r7, r6
 8003dc2:	42bb      	cmp	r3, r7
 8003dc4:	460e      	mov	r6, r1
 8003dc6:	d9f4      	bls.n	8003db2 <_printf_i+0x11a>
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d10b      	bne.n	8003de4 <_printf_i+0x14c>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	07de      	lsls	r6, r3, #31
 8003dd0:	d508      	bpl.n	8003de4 <_printf_i+0x14c>
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	6861      	ldr	r1, [r4, #4]
 8003dd6:	4299      	cmp	r1, r3
 8003dd8:	bfde      	ittt	le
 8003dda:	2330      	movle	r3, #48	; 0x30
 8003ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003de0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003de4:	1b52      	subs	r2, r2, r5
 8003de6:	6122      	str	r2, [r4, #16]
 8003de8:	f8cd a000 	str.w	sl, [sp]
 8003dec:	464b      	mov	r3, r9
 8003dee:	aa03      	add	r2, sp, #12
 8003df0:	4621      	mov	r1, r4
 8003df2:	4640      	mov	r0, r8
 8003df4:	f7ff fee2 	bl	8003bbc <_printf_common>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d14c      	bne.n	8003e96 <_printf_i+0x1fe>
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003e00:	b004      	add	sp, #16
 8003e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e06:	4835      	ldr	r0, [pc, #212]	; (8003edc <_printf_i+0x244>)
 8003e08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e0c:	6829      	ldr	r1, [r5, #0]
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e14:	6029      	str	r1, [r5, #0]
 8003e16:	061d      	lsls	r5, r3, #24
 8003e18:	d514      	bpl.n	8003e44 <_printf_i+0x1ac>
 8003e1a:	07df      	lsls	r7, r3, #31
 8003e1c:	bf44      	itt	mi
 8003e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e22:	6023      	strmi	r3, [r4, #0]
 8003e24:	b91e      	cbnz	r6, 8003e2e <_printf_i+0x196>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	f023 0320 	bic.w	r3, r3, #32
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	2310      	movs	r3, #16
 8003e30:	e7b0      	b.n	8003d94 <_printf_i+0xfc>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	f043 0320 	orr.w	r3, r3, #32
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	2378      	movs	r3, #120	; 0x78
 8003e3c:	4828      	ldr	r0, [pc, #160]	; (8003ee0 <_printf_i+0x248>)
 8003e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e42:	e7e3      	b.n	8003e0c <_printf_i+0x174>
 8003e44:	0659      	lsls	r1, r3, #25
 8003e46:	bf48      	it	mi
 8003e48:	b2b6      	uxthmi	r6, r6
 8003e4a:	e7e6      	b.n	8003e1a <_printf_i+0x182>
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	e7bb      	b.n	8003dc8 <_printf_i+0x130>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	6826      	ldr	r6, [r4, #0]
 8003e54:	6961      	ldr	r1, [r4, #20]
 8003e56:	1d18      	adds	r0, r3, #4
 8003e58:	6028      	str	r0, [r5, #0]
 8003e5a:	0635      	lsls	r5, r6, #24
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	d501      	bpl.n	8003e64 <_printf_i+0x1cc>
 8003e60:	6019      	str	r1, [r3, #0]
 8003e62:	e002      	b.n	8003e6a <_printf_i+0x1d2>
 8003e64:	0670      	lsls	r0, r6, #25
 8003e66:	d5fb      	bpl.n	8003e60 <_printf_i+0x1c8>
 8003e68:	8019      	strh	r1, [r3, #0]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	6123      	str	r3, [r4, #16]
 8003e6e:	4615      	mov	r5, r2
 8003e70:	e7ba      	b.n	8003de8 <_printf_i+0x150>
 8003e72:	682b      	ldr	r3, [r5, #0]
 8003e74:	1d1a      	adds	r2, r3, #4
 8003e76:	602a      	str	r2, [r5, #0]
 8003e78:	681d      	ldr	r5, [r3, #0]
 8003e7a:	6862      	ldr	r2, [r4, #4]
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4628      	mov	r0, r5
 8003e80:	f7fc f9e6 	bl	8000250 <memchr>
 8003e84:	b108      	cbz	r0, 8003e8a <_printf_i+0x1f2>
 8003e86:	1b40      	subs	r0, r0, r5
 8003e88:	6060      	str	r0, [r4, #4]
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	6123      	str	r3, [r4, #16]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e94:	e7a8      	b.n	8003de8 <_printf_i+0x150>
 8003e96:	6923      	ldr	r3, [r4, #16]
 8003e98:	462a      	mov	r2, r5
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	47d0      	blx	sl
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d0ab      	beq.n	8003dfc <_printf_i+0x164>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	079b      	lsls	r3, r3, #30
 8003ea8:	d413      	bmi.n	8003ed2 <_printf_i+0x23a>
 8003eaa:	68e0      	ldr	r0, [r4, #12]
 8003eac:	9b03      	ldr	r3, [sp, #12]
 8003eae:	4298      	cmp	r0, r3
 8003eb0:	bfb8      	it	lt
 8003eb2:	4618      	movlt	r0, r3
 8003eb4:	e7a4      	b.n	8003e00 <_printf_i+0x168>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4632      	mov	r2, r6
 8003eba:	4649      	mov	r1, r9
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	47d0      	blx	sl
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d09b      	beq.n	8003dfc <_printf_i+0x164>
 8003ec4:	3501      	adds	r5, #1
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	9903      	ldr	r1, [sp, #12]
 8003eca:	1a5b      	subs	r3, r3, r1
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	dcf2      	bgt.n	8003eb6 <_printf_i+0x21e>
 8003ed0:	e7eb      	b.n	8003eaa <_printf_i+0x212>
 8003ed2:	2500      	movs	r5, #0
 8003ed4:	f104 0619 	add.w	r6, r4, #25
 8003ed8:	e7f5      	b.n	8003ec6 <_printf_i+0x22e>
 8003eda:	bf00      	nop
 8003edc:	080041f5 	.word	0x080041f5
 8003ee0:	08004206 	.word	0x08004206

08003ee4 <memcpy>:
 8003ee4:	440a      	add	r2, r1
 8003ee6:	4291      	cmp	r1, r2
 8003ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003eec:	d100      	bne.n	8003ef0 <memcpy+0xc>
 8003eee:	4770      	bx	lr
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003efa:	4291      	cmp	r1, r2
 8003efc:	d1f9      	bne.n	8003ef2 <memcpy+0xe>
 8003efe:	bd10      	pop	{r4, pc}

08003f00 <memmove>:
 8003f00:	4288      	cmp	r0, r1
 8003f02:	b510      	push	{r4, lr}
 8003f04:	eb01 0402 	add.w	r4, r1, r2
 8003f08:	d902      	bls.n	8003f10 <memmove+0x10>
 8003f0a:	4284      	cmp	r4, r0
 8003f0c:	4623      	mov	r3, r4
 8003f0e:	d807      	bhi.n	8003f20 <memmove+0x20>
 8003f10:	1e43      	subs	r3, r0, #1
 8003f12:	42a1      	cmp	r1, r4
 8003f14:	d008      	beq.n	8003f28 <memmove+0x28>
 8003f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f1e:	e7f8      	b.n	8003f12 <memmove+0x12>
 8003f20:	4402      	add	r2, r0
 8003f22:	4601      	mov	r1, r0
 8003f24:	428a      	cmp	r2, r1
 8003f26:	d100      	bne.n	8003f2a <memmove+0x2a>
 8003f28:	bd10      	pop	{r4, pc}
 8003f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f32:	e7f7      	b.n	8003f24 <memmove+0x24>

08003f34 <_free_r>:
 8003f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f36:	2900      	cmp	r1, #0
 8003f38:	d044      	beq.n	8003fc4 <_free_r+0x90>
 8003f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f3e:	9001      	str	r0, [sp, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f1a1 0404 	sub.w	r4, r1, #4
 8003f46:	bfb8      	it	lt
 8003f48:	18e4      	addlt	r4, r4, r3
 8003f4a:	f000 f913 	bl	8004174 <__malloc_lock>
 8003f4e:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <_free_r+0x94>)
 8003f50:	9801      	ldr	r0, [sp, #4]
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	b933      	cbnz	r3, 8003f64 <_free_r+0x30>
 8003f56:	6063      	str	r3, [r4, #4]
 8003f58:	6014      	str	r4, [r2, #0]
 8003f5a:	b003      	add	sp, #12
 8003f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f60:	f000 b90e 	b.w	8004180 <__malloc_unlock>
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	d908      	bls.n	8003f7a <_free_r+0x46>
 8003f68:	6825      	ldr	r5, [r4, #0]
 8003f6a:	1961      	adds	r1, r4, r5
 8003f6c:	428b      	cmp	r3, r1
 8003f6e:	bf01      	itttt	eq
 8003f70:	6819      	ldreq	r1, [r3, #0]
 8003f72:	685b      	ldreq	r3, [r3, #4]
 8003f74:	1949      	addeq	r1, r1, r5
 8003f76:	6021      	streq	r1, [r4, #0]
 8003f78:	e7ed      	b.n	8003f56 <_free_r+0x22>
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	b10b      	cbz	r3, 8003f84 <_free_r+0x50>
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	d9fa      	bls.n	8003f7a <_free_r+0x46>
 8003f84:	6811      	ldr	r1, [r2, #0]
 8003f86:	1855      	adds	r5, r2, r1
 8003f88:	42a5      	cmp	r5, r4
 8003f8a:	d10b      	bne.n	8003fa4 <_free_r+0x70>
 8003f8c:	6824      	ldr	r4, [r4, #0]
 8003f8e:	4421      	add	r1, r4
 8003f90:	1854      	adds	r4, r2, r1
 8003f92:	42a3      	cmp	r3, r4
 8003f94:	6011      	str	r1, [r2, #0]
 8003f96:	d1e0      	bne.n	8003f5a <_free_r+0x26>
 8003f98:	681c      	ldr	r4, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	6053      	str	r3, [r2, #4]
 8003f9e:	4421      	add	r1, r4
 8003fa0:	6011      	str	r1, [r2, #0]
 8003fa2:	e7da      	b.n	8003f5a <_free_r+0x26>
 8003fa4:	d902      	bls.n	8003fac <_free_r+0x78>
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	6003      	str	r3, [r0, #0]
 8003faa:	e7d6      	b.n	8003f5a <_free_r+0x26>
 8003fac:	6825      	ldr	r5, [r4, #0]
 8003fae:	1961      	adds	r1, r4, r5
 8003fb0:	428b      	cmp	r3, r1
 8003fb2:	bf04      	itt	eq
 8003fb4:	6819      	ldreq	r1, [r3, #0]
 8003fb6:	685b      	ldreq	r3, [r3, #4]
 8003fb8:	6063      	str	r3, [r4, #4]
 8003fba:	bf04      	itt	eq
 8003fbc:	1949      	addeq	r1, r1, r5
 8003fbe:	6021      	streq	r1, [r4, #0]
 8003fc0:	6054      	str	r4, [r2, #4]
 8003fc2:	e7ca      	b.n	8003f5a <_free_r+0x26>
 8003fc4:	b003      	add	sp, #12
 8003fc6:	bd30      	pop	{r4, r5, pc}
 8003fc8:	200001b4 	.word	0x200001b4

08003fcc <sbrk_aligned>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4e0e      	ldr	r6, [pc, #56]	; (8004008 <sbrk_aligned+0x3c>)
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	6831      	ldr	r1, [r6, #0]
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	b911      	cbnz	r1, 8003fde <sbrk_aligned+0x12>
 8003fd8:	f000 f8bc 	bl	8004154 <_sbrk_r>
 8003fdc:	6030      	str	r0, [r6, #0]
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 f8b7 	bl	8004154 <_sbrk_r>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	d00a      	beq.n	8004000 <sbrk_aligned+0x34>
 8003fea:	1cc4      	adds	r4, r0, #3
 8003fec:	f024 0403 	bic.w	r4, r4, #3
 8003ff0:	42a0      	cmp	r0, r4
 8003ff2:	d007      	beq.n	8004004 <sbrk_aligned+0x38>
 8003ff4:	1a21      	subs	r1, r4, r0
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f000 f8ac 	bl	8004154 <_sbrk_r>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d101      	bne.n	8004004 <sbrk_aligned+0x38>
 8004000:	f04f 34ff 	mov.w	r4, #4294967295
 8004004:	4620      	mov	r0, r4
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	200001b8 	.word	0x200001b8

0800400c <_malloc_r>:
 800400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004010:	1ccd      	adds	r5, r1, #3
 8004012:	f025 0503 	bic.w	r5, r5, #3
 8004016:	3508      	adds	r5, #8
 8004018:	2d0c      	cmp	r5, #12
 800401a:	bf38      	it	cc
 800401c:	250c      	movcc	r5, #12
 800401e:	2d00      	cmp	r5, #0
 8004020:	4607      	mov	r7, r0
 8004022:	db01      	blt.n	8004028 <_malloc_r+0x1c>
 8004024:	42a9      	cmp	r1, r5
 8004026:	d905      	bls.n	8004034 <_malloc_r+0x28>
 8004028:	230c      	movs	r3, #12
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	2600      	movs	r6, #0
 800402e:	4630      	mov	r0, r6
 8004030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004034:	4e2e      	ldr	r6, [pc, #184]	; (80040f0 <_malloc_r+0xe4>)
 8004036:	f000 f89d 	bl	8004174 <__malloc_lock>
 800403a:	6833      	ldr	r3, [r6, #0]
 800403c:	461c      	mov	r4, r3
 800403e:	bb34      	cbnz	r4, 800408e <_malloc_r+0x82>
 8004040:	4629      	mov	r1, r5
 8004042:	4638      	mov	r0, r7
 8004044:	f7ff ffc2 	bl	8003fcc <sbrk_aligned>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	4604      	mov	r4, r0
 800404c:	d14d      	bne.n	80040ea <_malloc_r+0xde>
 800404e:	6834      	ldr	r4, [r6, #0]
 8004050:	4626      	mov	r6, r4
 8004052:	2e00      	cmp	r6, #0
 8004054:	d140      	bne.n	80040d8 <_malloc_r+0xcc>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	4631      	mov	r1, r6
 800405a:	4638      	mov	r0, r7
 800405c:	eb04 0803 	add.w	r8, r4, r3
 8004060:	f000 f878 	bl	8004154 <_sbrk_r>
 8004064:	4580      	cmp	r8, r0
 8004066:	d13a      	bne.n	80040de <_malloc_r+0xd2>
 8004068:	6821      	ldr	r1, [r4, #0]
 800406a:	3503      	adds	r5, #3
 800406c:	1a6d      	subs	r5, r5, r1
 800406e:	f025 0503 	bic.w	r5, r5, #3
 8004072:	3508      	adds	r5, #8
 8004074:	2d0c      	cmp	r5, #12
 8004076:	bf38      	it	cc
 8004078:	250c      	movcc	r5, #12
 800407a:	4629      	mov	r1, r5
 800407c:	4638      	mov	r0, r7
 800407e:	f7ff ffa5 	bl	8003fcc <sbrk_aligned>
 8004082:	3001      	adds	r0, #1
 8004084:	d02b      	beq.n	80040de <_malloc_r+0xd2>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	442b      	add	r3, r5
 800408a:	6023      	str	r3, [r4, #0]
 800408c:	e00e      	b.n	80040ac <_malloc_r+0xa0>
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	1b52      	subs	r2, r2, r5
 8004092:	d41e      	bmi.n	80040d2 <_malloc_r+0xc6>
 8004094:	2a0b      	cmp	r2, #11
 8004096:	d916      	bls.n	80040c6 <_malloc_r+0xba>
 8004098:	1961      	adds	r1, r4, r5
 800409a:	42a3      	cmp	r3, r4
 800409c:	6025      	str	r5, [r4, #0]
 800409e:	bf18      	it	ne
 80040a0:	6059      	strne	r1, [r3, #4]
 80040a2:	6863      	ldr	r3, [r4, #4]
 80040a4:	bf08      	it	eq
 80040a6:	6031      	streq	r1, [r6, #0]
 80040a8:	5162      	str	r2, [r4, r5]
 80040aa:	604b      	str	r3, [r1, #4]
 80040ac:	4638      	mov	r0, r7
 80040ae:	f104 060b 	add.w	r6, r4, #11
 80040b2:	f000 f865 	bl	8004180 <__malloc_unlock>
 80040b6:	f026 0607 	bic.w	r6, r6, #7
 80040ba:	1d23      	adds	r3, r4, #4
 80040bc:	1af2      	subs	r2, r6, r3
 80040be:	d0b6      	beq.n	800402e <_malloc_r+0x22>
 80040c0:	1b9b      	subs	r3, r3, r6
 80040c2:	50a3      	str	r3, [r4, r2]
 80040c4:	e7b3      	b.n	800402e <_malloc_r+0x22>
 80040c6:	6862      	ldr	r2, [r4, #4]
 80040c8:	42a3      	cmp	r3, r4
 80040ca:	bf0c      	ite	eq
 80040cc:	6032      	streq	r2, [r6, #0]
 80040ce:	605a      	strne	r2, [r3, #4]
 80040d0:	e7ec      	b.n	80040ac <_malloc_r+0xa0>
 80040d2:	4623      	mov	r3, r4
 80040d4:	6864      	ldr	r4, [r4, #4]
 80040d6:	e7b2      	b.n	800403e <_malloc_r+0x32>
 80040d8:	4634      	mov	r4, r6
 80040da:	6876      	ldr	r6, [r6, #4]
 80040dc:	e7b9      	b.n	8004052 <_malloc_r+0x46>
 80040de:	230c      	movs	r3, #12
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4638      	mov	r0, r7
 80040e4:	f000 f84c 	bl	8004180 <__malloc_unlock>
 80040e8:	e7a1      	b.n	800402e <_malloc_r+0x22>
 80040ea:	6025      	str	r5, [r4, #0]
 80040ec:	e7de      	b.n	80040ac <_malloc_r+0xa0>
 80040ee:	bf00      	nop
 80040f0:	200001b4 	.word	0x200001b4

080040f4 <_realloc_r>:
 80040f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f8:	4680      	mov	r8, r0
 80040fa:	4614      	mov	r4, r2
 80040fc:	460e      	mov	r6, r1
 80040fe:	b921      	cbnz	r1, 800410a <_realloc_r+0x16>
 8004100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004104:	4611      	mov	r1, r2
 8004106:	f7ff bf81 	b.w	800400c <_malloc_r>
 800410a:	b92a      	cbnz	r2, 8004118 <_realloc_r+0x24>
 800410c:	f7ff ff12 	bl	8003f34 <_free_r>
 8004110:	4625      	mov	r5, r4
 8004112:	4628      	mov	r0, r5
 8004114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004118:	f000 f838 	bl	800418c <_malloc_usable_size_r>
 800411c:	4284      	cmp	r4, r0
 800411e:	4607      	mov	r7, r0
 8004120:	d802      	bhi.n	8004128 <_realloc_r+0x34>
 8004122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004126:	d812      	bhi.n	800414e <_realloc_r+0x5a>
 8004128:	4621      	mov	r1, r4
 800412a:	4640      	mov	r0, r8
 800412c:	f7ff ff6e 	bl	800400c <_malloc_r>
 8004130:	4605      	mov	r5, r0
 8004132:	2800      	cmp	r0, #0
 8004134:	d0ed      	beq.n	8004112 <_realloc_r+0x1e>
 8004136:	42bc      	cmp	r4, r7
 8004138:	4622      	mov	r2, r4
 800413a:	4631      	mov	r1, r6
 800413c:	bf28      	it	cs
 800413e:	463a      	movcs	r2, r7
 8004140:	f7ff fed0 	bl	8003ee4 <memcpy>
 8004144:	4631      	mov	r1, r6
 8004146:	4640      	mov	r0, r8
 8004148:	f7ff fef4 	bl	8003f34 <_free_r>
 800414c:	e7e1      	b.n	8004112 <_realloc_r+0x1e>
 800414e:	4635      	mov	r5, r6
 8004150:	e7df      	b.n	8004112 <_realloc_r+0x1e>
	...

08004154 <_sbrk_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4d06      	ldr	r5, [pc, #24]	; (8004170 <_sbrk_r+0x1c>)
 8004158:	2300      	movs	r3, #0
 800415a:	4604      	mov	r4, r0
 800415c:	4608      	mov	r0, r1
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	f7fc fba4 	bl	80008ac <_sbrk>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_sbrk_r+0x1a>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_sbrk_r+0x1a>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	200001bc 	.word	0x200001bc

08004174 <__malloc_lock>:
 8004174:	4801      	ldr	r0, [pc, #4]	; (800417c <__malloc_lock+0x8>)
 8004176:	f000 b811 	b.w	800419c <__retarget_lock_acquire_recursive>
 800417a:	bf00      	nop
 800417c:	200001c0 	.word	0x200001c0

08004180 <__malloc_unlock>:
 8004180:	4801      	ldr	r0, [pc, #4]	; (8004188 <__malloc_unlock+0x8>)
 8004182:	f000 b80c 	b.w	800419e <__retarget_lock_release_recursive>
 8004186:	bf00      	nop
 8004188:	200001c0 	.word	0x200001c0

0800418c <_malloc_usable_size_r>:
 800418c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004190:	1f18      	subs	r0, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	bfbc      	itt	lt
 8004196:	580b      	ldrlt	r3, [r1, r0]
 8004198:	18c0      	addlt	r0, r0, r3
 800419a:	4770      	bx	lr

0800419c <__retarget_lock_acquire_recursive>:
 800419c:	4770      	bx	lr

0800419e <__retarget_lock_release_recursive>:
 800419e:	4770      	bx	lr

080041a0 <_init>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr

080041ac <_fini>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr
