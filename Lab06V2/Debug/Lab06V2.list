
Lab06V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005790  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005990  08005990  00015990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f8  080059f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a00  08005a00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a04  08005a04  00015a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000074  08005a7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08005a7c  00020618  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017de6  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f2  00000000  00000000  00037e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  0003b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002969a  00000000  00000000  0003d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018451  00000000  00000000  00066c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001012f4  00000000  00000000  0007f093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005214  00000000  00000000  001803d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08005978 	.word	0x08005978

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08005978 	.word	0x08005978

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_ADC1_Init+0x9c>)
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <MX_ADC1_Init+0xa0>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_ADC1_Init+0x9c>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_ADC1_Init+0x9c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_ADC1_Init+0x9c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_ADC1_Init+0x9c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_ADC1_Init+0x9c>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_ADC1_Init+0x9c>)
 800062e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_ADC1_Init+0x9c>)
 8000636:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_ADC1_Init+0x9c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_ADC1_Init+0x9c>)
 8000644:	2201      	movs	r2, #1
 8000646:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_ADC1_Init+0x9c>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_ADC1_Init+0x9c>)
 8000652:	2201      	movs	r2, #1
 8000654:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <MX_ADC1_Init+0x9c>)
 8000658:	f000 fe00 	bl	800125c <HAL_ADC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000662:	f000 fa5d 	bl	8000b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000666:	2303      	movs	r3, #3
 8000668:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066a:	2301      	movs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <MX_ADC1_Init+0x9c>)
 8000678:	f001 f83a 	bl	80016f0 <HAL_ADC_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 fa4d 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000090 	.word	0x20000090
 8000694:	40012000 	.word	0x40012000

08000698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <HAL_ADC_MspInit+0x84>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d12b      	bne.n	8000712 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_ADC_MspInit+0x88>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <HAL_ADC_MspInit+0x88>)
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	6453      	str	r3, [r2, #68]	; 0x44
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <HAL_ADC_MspInit+0x88>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <HAL_ADC_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <HAL_ADC_MspInit+0x88>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <HAL_ADC_MspInit+0x88>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ea:	2308      	movs	r3, #8
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4809      	ldr	r0, [pc, #36]	; (8000724 <HAL_ADC_MspInit+0x8c>)
 80006fe:	f001 fb63 	bl	8001dc8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2102      	movs	r1, #2
 8000706:	2012      	movs	r0, #18
 8000708:	f001 fb27 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800070c:	2012      	movs	r0, #18
 800070e:	f001 fb40 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012000 	.word	0x40012000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000

08000728 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b68      	ldr	r3, [pc, #416]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a67      	ldr	r2, [pc, #412]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b65      	ldr	r3, [pc, #404]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	4b62      	ldr	r3, [pc, #392]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a61      	ldr	r2, [pc, #388]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b5f      	ldr	r3, [pc, #380]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b5c      	ldr	r3, [pc, #368]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a5b      	ldr	r2, [pc, #364]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b59      	ldr	r3, [pc, #356]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b56      	ldr	r3, [pc, #344]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a55      	ldr	r2, [pc, #340]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b53      	ldr	r3, [pc, #332]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b50      	ldr	r3, [pc, #320]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a4f      	ldr	r2, [pc, #316]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b6:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a49      	ldr	r2, [pc, #292]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <MX_GPIO_Init+0x1b8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007d4:	4843      	ldr	r0, [pc, #268]	; (80008e4 <MX_GPIO_Init+0x1bc>)
 80007d6:	f001 fcbb 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	4842      	ldr	r0, [pc, #264]	; (80008e8 <MX_GPIO_Init+0x1c0>)
 80007e0:	f001 fcb6 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	483c      	ldr	r0, [pc, #240]	; (80008ec <MX_GPIO_Init+0x1c4>)
 80007fc:	f001 fae4 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000800:	2332      	movs	r3, #50	; 0x32
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000810:	230b      	movs	r3, #11
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4834      	ldr	r0, [pc, #208]	; (80008ec <MX_GPIO_Init+0x1c4>)
 800081c:	f001 fad4 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000820:	2386      	movs	r3, #134	; 0x86
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000830:	230b      	movs	r3, #11
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	482d      	ldr	r0, [pc, #180]	; (80008f0 <MX_GPIO_Init+0x1c8>)
 800083c:	f001 fac4 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000840:	f244 0381 	movw	r3, #16513	; 0x4081
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4822      	ldr	r0, [pc, #136]	; (80008e4 <MX_GPIO_Init+0x1bc>)
 800085a:	f001 fab5 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800085e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000870:	230b      	movs	r3, #11
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	481a      	ldr	r0, [pc, #104]	; (80008e4 <MX_GPIO_Init+0x1bc>)
 800087c:	f001 faa4 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4814      	ldr	r0, [pc, #80]	; (80008e8 <MX_GPIO_Init+0x1c0>)
 8000898:	f001 fa96 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <MX_GPIO_Init+0x1c0>)
 80008b0:	f001 fa8a 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c6:	230b      	movs	r3, #11
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_GPIO_Init+0x1c0>)
 80008d2:	f001 fa79 	bl	8001dc8 <HAL_GPIO_Init>

}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	; 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40021800 	.word	0x40021800
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020000 	.word	0x40020000

080008f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b09a      	sub	sp, #104	; 0x68
 80008f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008fa:	f000 fc2e 	bl	800115a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008fe:	f000 f89d 	bl	8000a3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000902:	f7ff ff11 	bl	8000728 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000906:	f000 fac7 	bl	8000e98 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800090a:	f000 fb55 	bl	8000fb8 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 800090e:	f7ff fe71 	bl	80005f4 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000912:	f000 f9df 	bl	8000cd4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000916:	f000 fa31 	bl	8000d7c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 800091a:	483c      	ldr	r0, [pc, #240]	; (8000a0c <main+0x118>)
 800091c:	f002 ff2e 	bl	800377c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000920:	483b      	ldr	r0, [pc, #236]	; (8000a10 <main+0x11c>)
 8000922:	f002 ff2b 	bl	800377c <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 8000926:	483b      	ldr	r0, [pc, #236]	; (8000a14 <main+0x120>)
 8000928:	f000 fcdc 	bl	80012e4 <HAL_ADC_Start_IT>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		char temp2[100];
		int sec = (count / 2000);
 800092c:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <main+0x124>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a3a      	ldr	r2, [pc, #232]	; (8000a1c <main+0x128>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	09db      	lsrs	r3, r3, #7
 8000938:	667b      	str	r3, [r7, #100]	; 0x64

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 800093a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093e:	4838      	ldr	r0, [pc, #224]	; (8000a20 <main+0x12c>)
 8000940:	f001 fbee 	bl	8002120 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d12c      	bne.n	80009a4 <main+0xb0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	2101      	movs	r1, #1
 800094e:	4835      	ldr	r0, [pc, #212]	; (8000a24 <main+0x130>)
 8000950:	f001 fbfe 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000958:	f000 fc5c 	bl	8001214 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	4830      	ldr	r0, [pc, #192]	; (8000a24 <main+0x130>)
 8000962:	f001 fbf5 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096a:	f000 fc53 	bl	8001214 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000974:	482b      	ldr	r0, [pc, #172]	; (8000a24 <main+0x130>)
 8000976:	f001 fbeb 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800097a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097e:	f000 fc49 	bl	8001214 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000988:	4826      	ldr	r0, [pc, #152]	; (8000a24 <main+0x130>)
 800098a:	f001 fbe1 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2101      	movs	r1, #1
 8000992:	4824      	ldr	r0, [pc, #144]	; (8000a24 <main+0x130>)
 8000994:	f001 fbdc 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	4821      	ldr	r0, [pc, #132]	; (8000a24 <main+0x130>)
 800099e:	f001 fbd7 	bl	8002150 <HAL_GPIO_WritePin>
 80009a2:	e7c3      	b.n	800092c <main+0x38>
		} else {
			if (sec > secbf) {
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <main+0x134>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dd1a      	ble.n	80009e4 <main+0xf0>
				sprintf(temp2, "%d\n\r", countdown);
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <main+0x138>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	463b      	mov	r3, r7
 80009b4:	491e      	ldr	r1, [pc, #120]	; (8000a30 <main+0x13c>)
 80009b6:	4618      	mov	r0, r3
 80009b8:	f004 fb70 	bl	800509c <siprintf>
				HAL_UART_Transmit(&huart3, temp2, strlen(temp2), 100);
 80009bc:	463b      	mov	r3, r7
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc3e 	bl	8000240 <strlen>
 80009c4:	4603      	mov	r3, r0
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4639      	mov	r1, r7
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	4819      	ldr	r0, [pc, #100]	; (8000a34 <main+0x140>)
 80009ce:	f003 fb9d 	bl	800410c <HAL_UART_Transmit>
				countdown -= 2;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <main+0x138>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3b02      	subs	r3, #2
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <main+0x138>)
 80009da:	6013      	str	r3, [r2, #0]
				secbf = sec;
 80009dc:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <main+0x134>)
 80009de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e002      	b.n	80009ea <main+0xf6>
			} else {
				secbf = sec;
 80009e4:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <main+0x134>)
 80009e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009e8:	6013      	str	r3, [r2, #0]
			}
			if (countdown < 1002) {
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <main+0x138>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d89a      	bhi.n	800092c <main+0x38>
				HAL_UART_Transmit(&huart3, "STOP", 4, 100);
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	2204      	movs	r2, #4
 80009fa:	490f      	ldr	r1, [pc, #60]	; (8000a38 <main+0x144>)
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <main+0x140>)
 80009fe:	f003 fb85 	bl	800410c <HAL_UART_Transmit>
				return 0;
 8000a02:	2300      	movs	r3, #0
			}
		}
	}
	/* USER CODE END 3 */
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3768      	adds	r7, #104	; 0x68
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200000e4 	.word	0x200000e4
 8000a10:	20000130 	.word	0x20000130
 8000a14:	20000090 	.word	0x20000090
 8000a18:	200000d8 	.word	0x200000d8
 8000a1c:	10624dd3 	.word	0x10624dd3
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020400 	.word	0x40020400
 8000a28:	200000dc 	.word	0x200000dc
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	08005998 	.word	0x08005998
 8000a34:	2000017c 	.word	0x2000017c
 8000a38:	080059a0 	.word	0x080059a0

08000a3c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	; 0x50
 8000a40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2234      	movs	r2, #52	; 0x34
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fb1e 	bl	800508c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000a60:	f001 fcd8 	bl	8002414 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <SystemClock_Config+0xdc>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a2b      	ldr	r2, [pc, #172]	; (8000b18 <SystemClock_Config+0xdc>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <SystemClock_Config+0xdc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <SystemClock_Config+0xe0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a84:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <SystemClock_Config+0xe0>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <SystemClock_Config+0xe0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000ab0:	23d8      	movs	r3, #216	; 0xd8
 8000ab2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ab8:	2309      	movs	r3, #9
 8000aba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fd05 	bl	80024d4 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x98>
		Error_Handler();
 8000ad0:	f000 f826 	bl	8000b20 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000ad4:	f001 fcae 	bl	8002434 <HAL_PWREx_EnableOverDrive>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xa6>
		Error_Handler();
 8000ade:	f000 f81f 	bl	8000b20 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2103      	movs	r1, #3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 ff95 	bl	8002a30 <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xd4>
		Error_Handler();
 8000b0c:	f000 f808 	bl	8000b20 <Error_Handler>
	}
}
 8000b10:	bf00      	nop
 8000b12:	3750      	adds	r7, #80	; 0x50
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40007000 	.word	0x40007000

08000b20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b62:	2005      	movs	r0, #5
 8000b64:	f001 f8ee 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 fb08 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <ADC_IRQHandler+0x10>)
 8000bce:	f000 fc61 	bl	8001494 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000090 	.word	0x20000090

08000bdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8000be8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8000bec:	f002 fe3e 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  count++;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	4a02      	ldr	r2, [pc, #8]	; (8000c00 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8000bf8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000d8 	.word	0x200000d8
 8000c04:	200000e4 	.word	0x200000e4

08000c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09a      	sub	sp, #104	; 0x68
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	char temp[100];
	sprintf(temp,"%d\r",count/2000);
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <TIM2_IRQHandler+0x2c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <TIM2_IRQHandler+0x30>)
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	09da      	lsrs	r2, r3, #7
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <TIM2_IRQHandler+0x34>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f004 fa3c 	bl	800509c <siprintf>
	//int len = sprintf(temp, "%02d:%02d\r", count/2000/60, (count/2000)%60);
	//HAL_UART_Transmit(&huart3, temp, strlen(temp), 100);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <TIM2_IRQHandler+0x38>)
 8000c26:	f002 fe21 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3768      	adds	r7, #104	; 0x68
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000d8 	.word	0x200000d8
 8000c38:	10624dd3 	.word	0x10624dd3
 8000c3c:	080059a8 	.word	0x080059a8
 8000c40:	20000130 	.word	0x20000130

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f004 f9e0 	bl	8005038 <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20080000 	.word	0x20080000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	200000e0 	.word	0x200000e0
 8000cac:	20000618 	.word	0x20000618

08000cb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000cf4:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <MX_TIM1_Init+0xa4>)
 8000cf6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 108-1;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000cfa:	226b      	movs	r2, #107	; 0x6b
 8000cfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000d06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d1e:	4815      	ldr	r0, [pc, #84]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000d20:	f002 fcd4 	bl	80036cc <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d2a:	f7ff fef9 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480e      	ldr	r0, [pc, #56]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000d3c:	f002 feb6 	bl	8003aac <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d46:	f7ff feeb 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_TIM1_Init+0xa0>)
 8000d5c:	f003 f8dc 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d66:	f7ff fedb 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000e4 	.word	0x200000e4
 8000d78:	40010000 	.word	0x40010000

08000d7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <MX_TIM2_Init+0x98>)
 8000d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <MX_TIM2_Init+0x98>)
 8000da4:	226b      	movs	r2, #107	; 0x6b
 8000da6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_TIM2_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <MX_TIM2_Init+0x98>)
 8000db0:	f240 321f 	movw	r2, #799	; 0x31f
 8000db4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_TIM2_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_TIM2_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc2:	4814      	ldr	r0, [pc, #80]	; (8000e14 <MX_TIM2_Init+0x98>)
 8000dc4:	f002 fc82 	bl	80036cc <HAL_TIM_Base_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dce:	f7ff fea7 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_TIM2_Init+0x98>)
 8000de0:	f002 fe64 	bl	8003aac <HAL_TIM_ConfigClockSource>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dea:	f7ff fe99 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dee:	2320      	movs	r3, #32
 8000df0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <MX_TIM2_Init+0x98>)
 8000dfc:	f003 f88c 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e06:	f7ff fe8b 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000130 	.word	0x20000130

08000e18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1a      	ldr	r2, [pc, #104]	; (8000e90 <HAL_TIM_Base_MspInit+0x78>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d114      	bne.n	8000e54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <HAL_TIM_Base_MspInit+0x7c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <HAL_TIM_Base_MspInit+0x7c>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_TIM_Base_MspInit+0x7c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2101      	movs	r1, #1
 8000e46:	2019      	movs	r0, #25
 8000e48:	f000 ff87 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e4c:	2019      	movs	r0, #25
 8000e4e:	f000 ffa0 	bl	8001d92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e52:	e018      	b.n	8000e86 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e5c:	d113      	bne.n	8000e86 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <HAL_TIM_Base_MspInit+0x7c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <HAL_TIM_Base_MspInit+0x7c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_TIM_Base_MspInit+0x7c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2102      	movs	r1, #2
 8000e7a:	201c      	movs	r0, #28
 8000e7c:	f000 ff6d 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e80:	201c      	movs	r0, #28
 8000e82:	f000 ff86 	bl	8001d92 <HAL_NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40010000 	.word	0x40010000
 8000e94:	40023800 	.word	0x40023800

08000e98 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <MX_USART3_UART_Init+0x5c>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000ea4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ea8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_USART3_UART_Init+0x58>)
 8000edc:	f003 f8c8 	bl	8004070 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ee6:	f7ff fe1b 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000017c 	.word	0x2000017c
 8000ef4:	40004800 	.word	0x40004800

08000ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0ae      	sub	sp, #184	; 0xb8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2290      	movs	r2, #144	; 0x90
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 f8b7 	bl	800508c <memset>
  if(uartHandle->Instance==USART3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <HAL_UART_MspInit+0xb4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d13c      	bne.n	8000fa2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 ffa0 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f42:	f7ff fded 	bl	8000b20 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_UART_MspInit+0xb8>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <HAL_UART_MspInit+0xb8>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0xb8>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_UART_MspInit+0xb8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <HAL_UART_MspInit+0xb8>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_UART_MspInit+0xb8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f90:	2307      	movs	r3, #7
 8000f92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_UART_MspInit+0xbc>)
 8000f9e:	f000 ff13 	bl	8001dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	37b8      	adds	r7, #184	; 0xb8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40004800 	.word	0x40004800
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020c00 	.word	0x40020c00

08000fb8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	2206      	movs	r2, #6
 8000fc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffc:	f001 f8c1 	bl	8002182 <HAL_PCD_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001006:	f7ff fd8b 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000200 	.word	0x20000200

08001014 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0ae      	sub	sp, #184	; 0xb8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2290      	movs	r2, #144	; 0x90
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f829 	bl	800508c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001042:	d159      	bne.n	80010f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001048:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4618      	mov	r0, r3
 8001056:	f001 ff11 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001060:	f7ff fd5e 	bl	8000b20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_PCD_MspInit+0xec>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_PCD_MspInit+0xec>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6313      	str	r3, [r2, #48]	; 0x30
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_PCD_MspInit+0xec>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800107c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001096:	230a      	movs	r3, #10
 8001098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4818      	ldr	r0, [pc, #96]	; (8001104 <HAL_PCD_MspInit+0xf0>)
 80010a4:	f000 fe90 	bl	8001dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4810      	ldr	r0, [pc, #64]	; (8001104 <HAL_PCD_MspInit+0xf0>)
 80010c4:	f000 fe80 	bl	8001dc8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_PCD_MspInit+0xec>)
 80010ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_PCD_MspInit+0xec>)
 80010ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d2:	6353      	str	r3, [r2, #52]	; 0x34
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_PCD_MspInit+0xec>)
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <HAL_PCD_MspInit+0xec>)
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_PCD_MspInit+0xec>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ea:	6453      	str	r3, [r2, #68]	; 0x44
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_PCD_MspInit+0xec>)
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	37b8      	adds	r7, #184	; 0xb8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110e:	490e      	ldr	r1, [pc, #56]	; (8001148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001124:	4c0b      	ldr	r4, [pc, #44]	; (8001154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001132:	f7ff fdbd 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f003 ff85 	bl	8005044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff fbdb 	bl	80008f4 <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800114c:	08005a08 	.word	0x08005a08
  ldr r2, =_sbss
 8001150:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001154:	20000618 	.word	0x20000618

08001158 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <CAN1_RX0_IRQHandler>

0800115a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115e:	2003      	movs	r0, #3
 8001160:	f000 fdf0 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001164:	2000      	movs	r0, #0
 8001166:	f000 f805 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116a:	f7ff fcdf 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fe0b 	bl	8001dae <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 fdd3 	bl	8001d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000004 	.word	0x20000004
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	20000008 	.word	0x20000008

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	20000604 	.word	0x20000604

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000604 	.word	0x20000604

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000000c 	.word	0x2000000c

0800125c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e031      	b.n	80012d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fa0c 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_ADC_Init+0x84>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	f043 0202 	orr.w	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fb76 	bl	800199c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f023 0303 	bic.w	r3, r3, #3
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
 80012c6:	e001      	b.n	80012cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	ffffeefd 	.word	0xffffeefd

080012e4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_Start_IT+0x1a>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e0b5      	b.n	800146a <HAL_ADC_Start_IT+0x186>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d018      	beq.n	8001346 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001324:	4b54      	ldr	r3, [pc, #336]	; (8001478 <HAL_ADC_Start_IT+0x194>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a54      	ldr	r2, [pc, #336]	; (800147c <HAL_ADC_Start_IT+0x198>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0c9a      	lsrs	r2, r3, #18
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001338:	e002      	b.n	8001340 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3b01      	subs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f9      	bne.n	800133a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d17d      	bne.n	8001450 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001358:	4b49      	ldr	r3, [pc, #292]	; (8001480 <HAL_ADC_Start_IT+0x19c>)
 800135a:	4013      	ands	r3, r2
 800135c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800137a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800138e:	d106      	bne.n	800139e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f023 0206 	bic.w	r2, r3, #6
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
 800139c:	e002      	b.n	80013a4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013b4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6859      	ldr	r1, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_ADC_Start_IT+0x1a0>)
 80013c2:	430b      	orrs	r3, r1
 80013c4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_ADC_Start_IT+0x1a4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10f      	bne.n	80013f2 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d143      	bne.n	8001468 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	e03a      	b.n	8001468 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a25      	ldr	r2, [pc, #148]	; (800148c <HAL_ADC_Start_IT+0x1a8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d10e      	bne.n	800141a <HAL_ADC_Start_IT+0x136>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d107      	bne.n	800141a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001418:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_ADC_Start_IT+0x1a4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	d120      	bne.n	8001468 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a19      	ldr	r2, [pc, #100]	; (8001490 <HAL_ADC_Start_IT+0x1ac>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d11b      	bne.n	8001468 <HAL_ADC_Start_IT+0x184>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d114      	bne.n	8001468 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	e00b      	b.n	8001468 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f043 0210 	orr.w	r2, r3, #16
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000004 	.word	0x20000004
 800147c:	431bde83 	.word	0x431bde83
 8001480:	fffff8fe 	.word	0xfffff8fe
 8001484:	04000020 	.word	0x04000020
 8001488:	40012300 	.word	0x40012300
 800148c:	40012000 	.word	0x40012000
 8001490:	40012200 	.word	0x40012200

08001494 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d049      	beq.n	800155e <HAL_ADC_IRQHandler+0xca>
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d046      	beq.n	800155e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d105      	bne.n	80014e8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d12b      	bne.n	800154e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d127      	bne.n	800154e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001516:	2b00      	cmp	r3, #0
 8001518:	d119      	bne.n	800154e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0220 	bic.w	r2, r2, #32
 8001528:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f8b0 	bl	80016b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f06f 0212 	mvn.w	r2, #18
 800155c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d057      	beq.n	8001624 <HAL_ADC_IRQHandler+0x190>
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d054      	beq.n	8001624 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d105      	bne.n	8001592 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d139      	bne.n	8001614 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d12b      	bne.n	8001614 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d124      	bne.n	8001614 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d11d      	bne.n	8001614 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d119      	bne.n	8001614 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 fabb 	bl	8001b90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f06f 020c 	mvn.w	r2, #12
 8001622:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001632:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d017      	beq.n	800166a <HAL_ADC_IRQHandler+0x1d6>
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d014      	beq.n	800166a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b01      	cmp	r3, #1
 800164c:	d10d      	bne.n	800166a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f834 	bl	80016c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0201 	mvn.w	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001678:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d015      	beq.n	80016ac <HAL_ADC_IRQHandler+0x218>
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d012      	beq.n	80016ac <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f043 0202 	orr.w	r2, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f06f 0220 	mvn.w	r2, #32
 800169a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f81d 	bl	80016dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f06f 0220 	mvn.w	r2, #32
 80016aa:	601a      	str	r2, [r3, #0]
  }
}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1c>
 8001708:	2302      	movs	r3, #2
 800170a:	e136      	b.n	800197a <HAL_ADC_ConfigChannel+0x28a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b09      	cmp	r3, #9
 800171a:	d93a      	bls.n	8001792 <HAL_ADC_ConfigChannel+0xa2>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001724:	d035      	beq.n	8001792 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68d9      	ldr	r1, [r3, #12]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	3b1e      	subs	r3, #30
 800173c:	2207      	movs	r2, #7
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	400a      	ands	r2, r1
 800174a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <HAL_ADC_ConfigChannel+0x298>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10a      	bne.n	800176c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68d9      	ldr	r1, [r3, #12]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	061a      	lsls	r2, r3, #24
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800176a:	e035      	b.n	80017d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	4603      	mov	r3, r0
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4403      	add	r3, r0
 8001784:	3b1e      	subs	r3, #30
 8001786:	409a      	lsls	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001790:	e022      	b.n	80017d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6919      	ldr	r1, [r3, #16]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	b29b      	uxth	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	2207      	movs	r2, #7
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43da      	mvns	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	400a      	ands	r2, r1
 80017b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6919      	ldr	r1, [r3, #16]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	4603      	mov	r3, r0
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4403      	add	r3, r0
 80017ce:	409a      	lsls	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b06      	cmp	r3, #6
 80017de:	d824      	bhi.n	800182a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b05      	subs	r3, #5
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43da      	mvns	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b05      	subs	r3, #5
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	635a      	str	r2, [r3, #52]	; 0x34
 8001828:	e04c      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d824      	bhi.n	800187c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b23      	subs	r3, #35	; 0x23
 8001844:	221f      	movs	r2, #31
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	400a      	ands	r2, r1
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b23      	subs	r3, #35	; 0x23
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
 800187a:	e023      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b41      	subs	r3, #65	; 0x41
 800188e:	221f      	movs	r2, #31
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43da      	mvns	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	400a      	ands	r2, r1
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b41      	subs	r3, #65	; 0x41
 80018b8:	fa00 f203 	lsl.w	r2, r0, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a30      	ldr	r2, [pc, #192]	; (800198c <HAL_ADC_ConfigChannel+0x29c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10a      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1f4>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018d6:	d105      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 80018de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a28      	ldr	r2, [pc, #160]	; (800198c <HAL_ADC_ConfigChannel+0x29c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10f      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d10b      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4a25      	ldr	r2, [pc, #148]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 80018fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001900:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 8001908:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800190c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1e      	ldr	r2, [pc, #120]	; (800198c <HAL_ADC_ConfigChannel+0x29c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d12b      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x280>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <HAL_ADC_ConfigChannel+0x298>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d003      	beq.n	800192a <HAL_ADC_ConfigChannel+0x23a>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b11      	cmp	r3, #17
 8001928:	d122      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 8001930:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001934:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a15      	ldr	r2, [pc, #84]	; (8001990 <HAL_ADC_ConfigChannel+0x2a0>)
 800193c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001940:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_ADC_ConfigChannel+0x298>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d111      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_ADC_ConfigChannel+0x2a4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_ADC_ConfigChannel+0x2a8>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0c9a      	lsrs	r2, r3, #18
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001962:	e002      	b.n	800196a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3b01      	subs	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f9      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	10000012 	.word	0x10000012
 800198c:	40012000 	.word	0x40012000
 8001990:	40012300 	.word	0x40012300
 8001994:	20000004 	.word	0x20000004
 8001998:	431bde83 	.word	0x431bde83

0800199c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019a4:	4b78      	ldr	r3, [pc, #480]	; (8001b88 <ADC_Init+0x1ec>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a77      	ldr	r2, [pc, #476]	; (8001b88 <ADC_Init+0x1ec>)
 80019aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019b0:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <ADC_Init+0x1ec>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4973      	ldr	r1, [pc, #460]	; (8001b88 <ADC_Init+0x1ec>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	021a      	lsls	r2, r3, #8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6899      	ldr	r1, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <ADC_Init+0x1f0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d022      	beq.n	8001a76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6899      	ldr	r1, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6899      	ldr	r1, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e00f      	b.n	8001a96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0202 	bic.w	r2, r2, #2
 8001aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	005a      	lsls	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01b      	beq.n	8001afc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ae2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6859      	ldr	r1, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	3b01      	subs	r3, #1
 8001af0:	035a      	lsls	r2, r3, #13
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	e007      	b.n	8001b0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	051a      	lsls	r2, r3, #20
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6899      	ldr	r1, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b4e:	025a      	lsls	r2, r3, #9
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6899      	ldr	r1, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	029a      	lsls	r2, r3, #10
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40012300 	.word	0x40012300
 8001b8c:	0f000001 	.word	0x0f000001

08001b90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00
 8001be8:	05fa0000 	.word	0x05fa0000

08001bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0b      	blt.n	8001c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4907      	ldr	r1, [pc, #28]	; (8001c40 <__NVIC_EnableIRQ+0x38>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100

08001c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0a      	blt.n	8001c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	490c      	ldr	r1, [pc, #48]	; (8001c90 <__NVIC_SetPriority+0x4c>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	440b      	add	r3, r1
 8001c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c6c:	e00a      	b.n	8001c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <__NVIC_SetPriority+0x50>)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	0112      	lsls	r2, r2, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	440b      	add	r3, r1
 8001c82:	761a      	strb	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	bf28      	it	cs
 8001cb6:	2304      	movcs	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d902      	bls.n	8001cc8 <NVIC_EncodePriority+0x30>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	e000      	b.n	8001cca <NVIC_EncodePriority+0x32>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43d9      	mvns	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	4313      	orrs	r3, r2
         );
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff8e 	bl	8001c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff29 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff3e 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff8e 	bl	8001c98 <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5d 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff31 	bl	8001c08 <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa2 	bl	8001d00 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e175      	b.n	80020d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8164 	bne.w	80020ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d005      	beq.n	8001e1e <HAL_GPIO_Init+0x56>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d130      	bne.n	8001e80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d017      	beq.n	8001ebc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d123      	bne.n	8001f10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	69b9      	ldr	r1, [r7, #24]
 8001f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80be 	beq.w	80020ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	4b66      	ldr	r3, [pc, #408]	; (80020ec <HAL_GPIO_Init+0x324>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a65      	ldr	r2, [pc, #404]	; (80020ec <HAL_GPIO_Init+0x324>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_GPIO_Init+0x324>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f6a:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <HAL_GPIO_Init+0x328>)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <HAL_GPIO_Init+0x32c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d037      	beq.n	8002006 <HAL_GPIO_Init+0x23e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d031      	beq.n	8002002 <HAL_GPIO_Init+0x23a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a56      	ldr	r2, [pc, #344]	; (80020fc <HAL_GPIO_Init+0x334>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02b      	beq.n	8001ffe <HAL_GPIO_Init+0x236>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a55      	ldr	r2, [pc, #340]	; (8002100 <HAL_GPIO_Init+0x338>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d025      	beq.n	8001ffa <HAL_GPIO_Init+0x232>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_GPIO_Init+0x33c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01f      	beq.n	8001ff6 <HAL_GPIO_Init+0x22e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a53      	ldr	r2, [pc, #332]	; (8002108 <HAL_GPIO_Init+0x340>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d019      	beq.n	8001ff2 <HAL_GPIO_Init+0x22a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_GPIO_Init+0x344>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0x226>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a51      	ldr	r2, [pc, #324]	; (8002110 <HAL_GPIO_Init+0x348>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00d      	beq.n	8001fea <HAL_GPIO_Init+0x222>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a50      	ldr	r2, [pc, #320]	; (8002114 <HAL_GPIO_Init+0x34c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <HAL_GPIO_Init+0x21e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4f      	ldr	r2, [pc, #316]	; (8002118 <HAL_GPIO_Init+0x350>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_GPIO_Init+0x21a>
 8001fde:	2309      	movs	r3, #9
 8001fe0:	e012      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	e010      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	e00e      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fea:	2307      	movs	r3, #7
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x328>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_GPIO_Init+0x354>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204a:	4a34      	ldr	r2, [pc, #208]	; (800211c <HAL_GPIO_Init+0x354>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002050:	4b32      	ldr	r3, [pc, #200]	; (800211c <HAL_GPIO_Init+0x354>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002074:	4a29      	ldr	r2, [pc, #164]	; (800211c <HAL_GPIO_Init+0x354>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_GPIO_Init+0x354>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209e:	4a1f      	ldr	r2, [pc, #124]	; (800211c <HAL_GPIO_Init+0x354>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_GPIO_Init+0x354>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_GPIO_Init+0x354>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f ae86 	bls.w	8001de8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40021800 	.word	0x40021800
 8002110:	40021c00 	.word	0x40021c00
 8002114:	40022000 	.word	0x40022000
 8002118:	40022400 	.word	0x40022400
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e001      	b.n	8002142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002184:	b08f      	sub	sp, #60	; 0x3c
 8002186:	af0a      	add	r7, sp, #40	; 0x28
 8002188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e116      	b.n	80023c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe ff30 	bl	8001014 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 fc9a 	bl	8004b0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	687e      	ldr	r6, [r7, #4]
 80021e0:	466d      	mov	r5, sp
 80021e2:	f106 0410 	add.w	r4, r6, #16
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f6:	1d33      	adds	r3, r6, #4
 80021f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f002 fc2e 	bl	8004a5c <USB_CoreInit>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0d7      	b.n	80023c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fc88 	bl	8004b2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e04a      	b.n	80022ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	333d      	adds	r3, #61	; 0x3d
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	333c      	adds	r3, #60	; 0x3c
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	b298      	uxth	r0, r3
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3342      	adds	r3, #66	; 0x42
 8002260:	4602      	mov	r2, r0
 8002262:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	333f      	adds	r3, #63	; 0x3f
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	3344      	adds	r3, #68	; 0x44
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	3348      	adds	r3, #72	; 0x48
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3350      	adds	r3, #80	; 0x50
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	3301      	adds	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3af      	bcc.n	8002224 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	e044      	b.n	8002354 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	3301      	adds	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d3b5      	bcc.n	80022ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	687e      	ldr	r6, [r7, #4]
 8002366:	466d      	mov	r5, sp
 8002368:	f106 0410 	add.w	r4, r6, #16
 800236c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002374:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002378:	e885 0003 	stmia.w	r5, {r0, r1}
 800237c:	1d33      	adds	r3, r6, #4
 800237e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002380:	6838      	ldr	r0, [r7, #0]
 8002382:	f002 fc21 	bl	8004bc8 <USB_DevInit>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e014      	b.n	80023c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f80b 	bl	80023cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fddb 	bl	8004f76 <USB_DevDisconnect>

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_PCDEx_ActivateLPM+0x44>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	10000003 	.word	0x10000003

08002414 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40007000 	.word	0x40007000

08002434 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_PWREx_EnableOverDrive+0x98>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002462:	f7fe fecb 	bl	80011fc <HAL_GetTick>
 8002466:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002468:	e009      	b.n	800247e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800246a:	f7fe fec7 	bl	80011fc <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002478:	d901      	bls.n	800247e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e022      	b.n	80024c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d1ee      	bne.n	800246a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002496:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002498:	f7fe feb0 	bl	80011fc <HAL_GetTick>
 800249c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800249e:	e009      	b.n	80024b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024a0:	f7fe feac 	bl	80011fc <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ae:	d901      	bls.n	80024b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e007      	b.n	80024c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024c0:	d1ee      	bne.n	80024a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40007000 	.word	0x40007000

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e29b      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8087 	beq.w	8002606 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f8:	4b96      	ldr	r3, [pc, #600]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	2b04      	cmp	r3, #4
 8002502:	d00c      	beq.n	800251e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002504:	4b93      	ldr	r3, [pc, #588]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d112      	bne.n	8002536 <HAL_RCC_OscConfig+0x62>
 8002510:	4b90      	ldr	r3, [pc, #576]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251c:	d10b      	bne.n	8002536 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251e:	4b8d      	ldr	r3, [pc, #564]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d06c      	beq.n	8002604 <HAL_RCC_OscConfig+0x130>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d168      	bne.n	8002604 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e275      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x7a>
 8002540:	4b84      	ldr	r3, [pc, #528]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a83      	ldr	r2, [pc, #524]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e02e      	b.n	80025ac <HAL_RCC_OscConfig+0xd8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x9c>
 8002556:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7e      	ldr	r2, [pc, #504]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 800255c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b7c      	ldr	r3, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7b      	ldr	r2, [pc, #492]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e01d      	b.n	80025ac <HAL_RCC_OscConfig+0xd8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0xc0>
 800257a:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a75      	ldr	r2, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b73      	ldr	r3, [pc, #460]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a72      	ldr	r2, [pc, #456]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0xd8>
 8002594:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6e      	ldr	r2, [pc, #440]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a6b      	ldr	r2, [pc, #428]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fe22 	bl	80011fc <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe fe1e 	bl	80011fc <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e229      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b61      	ldr	r3, [pc, #388]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0xe8>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fe0e 	bl	80011fc <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e4:	f7fe fe0a 	bl	80011fc <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e215      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	4b57      	ldr	r3, [pc, #348]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x110>
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d069      	beq.n	80026e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002612:	4b50      	ldr	r3, [pc, #320]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261e:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b08      	cmp	r3, #8
 8002628:	d11c      	bne.n	8002664 <HAL_RCC_OscConfig+0x190>
 800262a:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d116      	bne.n	8002664 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x17a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e1e9      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	493d      	ldr	r1, [pc, #244]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	e040      	b.n	80026e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d023      	beq.n	80026b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a38      	ldr	r2, [pc, #224]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fdc0 	bl	80011fc <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002680:	f7fe fdbc 	bl	80011fc <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1c7      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4929      	ldr	r1, [pc, #164]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
 80026b2:	e018      	b.n	80026e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a26      	ldr	r2, [pc, #152]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fd9c 	bl	80011fc <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c8:	f7fe fd98 	bl	80011fc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1a3      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d038      	beq.n	8002764 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d019      	beq.n	800272e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 80026fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fe:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7fe fd79 	bl	80011fc <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270e:	f7fe fd75 	bl	80011fc <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e180      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x23a>
 800272c:	e01a      	b.n	8002764 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_RCC_OscConfig+0x280>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7fe fd5f 	bl	80011fc <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002742:	f7fe fd5b 	bl	80011fc <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d903      	bls.n	8002758 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e166      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
 8002754:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	4b92      	ldr	r3, [pc, #584]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 800275a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ee      	bne.n	8002742 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a4 	beq.w	80028ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b8c      	ldr	r3, [pc, #560]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b89      	ldr	r3, [pc, #548]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a88      	ldr	r2, [pc, #544]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b86      	ldr	r3, [pc, #536]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279a:	4b83      	ldr	r3, [pc, #524]	; (80029a8 <HAL_RCC_OscConfig+0x4d4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027a6:	4b80      	ldr	r3, [pc, #512]	; (80029a8 <HAL_RCC_OscConfig+0x4d4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7f      	ldr	r2, [pc, #508]	; (80029a8 <HAL_RCC_OscConfig+0x4d4>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7fe fd23 	bl	80011fc <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7fe fd1f 	bl	80011fc <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	; 0x64
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e12a      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027cc:	4b76      	ldr	r3, [pc, #472]	; (80029a8 <HAL_RCC_OscConfig+0x4d4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x31a>
 80027e0:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a6f      	ldr	r2, [pc, #444]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	e02d      	b.n	800284a <HAL_RCC_OscConfig+0x376>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x33c>
 80027f6:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a6a      	ldr	r2, [pc, #424]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a67      	ldr	r2, [pc, #412]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
 800280e:	e01c      	b.n	800284a <HAL_RCC_OscConfig+0x376>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x35e>
 8002818:	4b62      	ldr	r3, [pc, #392]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a61      	ldr	r2, [pc, #388]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	4a5e      	ldr	r2, [pc, #376]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6713      	str	r3, [r2, #112]	; 0x70
 8002830:	e00b      	b.n	800284a <HAL_RCC_OscConfig+0x376>
 8002832:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
 800283e:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a58      	ldr	r2, [pc, #352]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d015      	beq.n	800287e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7fe fcd3 	bl	80011fc <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fccf 	bl	80011fc <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0d8      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCC_OscConfig+0x386>
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287e:	f7fe fcbd 	bl	80011fc <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fcb9 	bl	80011fc <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0c2      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a3c      	ldr	r2, [pc, #240]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80ae 	beq.w	8002a20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d06d      	beq.n	80029ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d14b      	bne.n	8002970 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 80028de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fc8a 	bl	80011fc <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fc86 	bl	80011fc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e091      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	3b01      	subs	r3, #1
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	491b      	ldr	r1, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fc58 	bl	80011fc <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fc54 	bl	80011fc <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e05f      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x47c>
 800296e:	e057      	b.n	8002a20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800297a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fc3e 	bl	80011fc <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fc3a 	bl	80011fc <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e045      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCC_OscConfig+0x4d0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x4b0>
 80029a2:	e03d      	b.n	8002a20 <HAL_RCC_OscConfig+0x54c>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029ac:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <HAL_RCC_OscConfig+0x558>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d030      	beq.n	8002a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d129      	bne.n	8002a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d122      	bne.n	8002a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d119      	bne.n	8002a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	3b01      	subs	r3, #1
 80029f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d10f      	bne.n	8002a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800

08002a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0d0      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a48:	4b6a      	ldr	r3, [pc, #424]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d910      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b67      	ldr	r3, [pc, #412]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 020f 	bic.w	r2, r3, #15
 8002a5e:	4965      	ldr	r1, [pc, #404]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0b8      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a90:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a58      	ldr	r2, [pc, #352]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa8:	4b53      	ldr	r3, [pc, #332]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a52      	ldr	r2, [pc, #328]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	494d      	ldr	r1, [pc, #308]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d040      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d115      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af2:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e073      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e06b      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 0203 	bic.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4936      	ldr	r1, [pc, #216]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b24:	f7fe fb6a 	bl	80011fc <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2c:	f7fe fb66 	bl	80011fc <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e053      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 020c 	and.w	r2, r3, #12
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d1eb      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d210      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 020f 	bic.w	r2, r3, #15
 8002b6a:	4922      	ldr	r1, [pc, #136]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e032      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4916      	ldr	r1, [pc, #88]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	490e      	ldr	r1, [pc, #56]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bc2:	f000 f821 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	490a      	ldr	r1, [pc, #40]	; (8002bfc <HAL_RCC_ClockConfig+0x1cc>)
 8002bd4:	5ccb      	ldrb	r3, [r1, r3]
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	4a09      	ldr	r2, [pc, #36]	; (8002c00 <HAL_RCC_ClockConfig+0x1d0>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_ClockConfig+0x1d4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fac6 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	080059ac 	.word	0x080059ac
 8002c00:	20000004 	.word	0x20000004
 8002c04:	20000008 	.word	0x20000008

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c0c:	b094      	sub	sp, #80	; 0x50
 8002c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	647b      	str	r3, [r7, #68]	; 0x44
 8002c14:	2300      	movs	r3, #0
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c20:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d00d      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x40>
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	f200 80e1 	bhi.w	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x34>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3a:	e0db      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c40:	e0db      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c42:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c46:	e0d8      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c50:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c52:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d063      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
 8002c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	f04f 0000 	mov.w	r0, #0
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	0159      	lsls	r1, r3, #5
 8002c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8c:	0150      	lsls	r0, r2, #5
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4621      	mov	r1, r4
 8002c94:	1a51      	subs	r1, r2, r1
 8002c96:	6139      	str	r1, [r7, #16]
 8002c98:	4629      	mov	r1, r5
 8002c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cac:	4659      	mov	r1, fp
 8002cae:	018b      	lsls	r3, r1, #6
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	018a      	lsls	r2, r1, #6
 8002cba:	4651      	mov	r1, sl
 8002cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	eb18 0303 	adds.w	r3, r8, r3
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	eb49 0303 	adc.w	r3, r9, r3
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	024b      	lsls	r3, r1, #9
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d04:	4621      	mov	r1, r4
 8002d06:	024a      	lsls	r2, r1, #9
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0e:	2200      	movs	r2, #0
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d18:	f7fd faea 	bl	80002f0 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d24:	e058      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4611      	mov	r1, r2
 8002d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	0159      	lsls	r1, r3, #5
 8002d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d52:	0150      	lsls	r0, r2, #5
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4641      	mov	r1, r8
 8002d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d5e:	4649      	mov	r1, r9
 8002d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d78:	ebb2 040a 	subs.w	r4, r2, sl
 8002d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	00eb      	lsls	r3, r5, #3
 8002d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8e:	00e2      	lsls	r2, r4, #3
 8002d90:	4614      	mov	r4, r2
 8002d92:	461d      	mov	r5, r3
 8002d94:	4643      	mov	r3, r8
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	eb45 0303 	adc.w	r3, r5, r3
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db8:	4621      	mov	r1, r4
 8002dba:	028a      	lsls	r2, r1, #10
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	61fa      	str	r2, [r7, #28]
 8002dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dcc:	f7fd fa90 	bl	80002f0 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002df6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3750      	adds	r7, #80	; 0x50
 8002e00:	46bd      	mov	sp, r7
 8002e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	007a1200 	.word	0x007a1200

08002e14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e30:	f7ff fff0 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0a9b      	lsrs	r3, r3, #10
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	; (8002e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	080059bc 	.word	0x080059bc

08002e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e58:	f7ff ffdc 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	0b5b      	lsrs	r3, r3, #13
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	4903      	ldr	r1, [pc, #12]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	080059bc 	.word	0x080059bc

08002e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d012      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ea4:	4b69      	ldr	r3, [pc, #420]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a68      	ldr	r2, [pc, #416]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eae:	6093      	str	r3, [r2, #8]
 8002eb0:	4b66      	ldr	r3, [pc, #408]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb8:	4964      	ldr	r1, [pc, #400]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d017      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ed6:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	4959      	ldr	r1, [pc, #356]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef4:	d101      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d017      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f12:	4b4e      	ldr	r3, [pc, #312]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	494a      	ldr	r1, [pc, #296]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f30:	d101      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 808b 	beq.w	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	4a39      	ldr	r2, [pc, #228]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a34      	ldr	r2, [pc, #208]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7fe f93a 	bl	80011fc <HAL_GetTick>
 8002f88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8c:	f7fe f936 	bl	80011fc <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e38f      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d035      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d02e      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fea:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d114      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe f8fe 	bl	80011fc <HAL_GetTick>
 8003000:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe f8fa 	bl	80011fc <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e351      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ee      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003032:	d111      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003042:	400b      	ands	r3, r1
 8003044:	4901      	ldr	r1, [pc, #4]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
 800304a:	e00b      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800304c:	40023800 	.word	0x40023800
 8003050:	40007000 	.word	0x40007000
 8003054:	0ffffcff 	.word	0x0ffffcff
 8003058:	4bac      	ldr	r3, [pc, #688]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4aab      	ldr	r2, [pc, #684]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003062:	6093      	str	r3, [r2, #8]
 8003064:	4ba9      	ldr	r3, [pc, #676]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	49a6      	ldr	r1, [pc, #664]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003072:	4313      	orrs	r3, r2
 8003074:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003082:	4ba2      	ldr	r3, [pc, #648]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003088:	4aa0      	ldr	r2, [pc, #640]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003092:	4b9e      	ldr	r3, [pc, #632]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003094:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	499b      	ldr	r1, [pc, #620]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b0:	4b96      	ldr	r3, [pc, #600]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030be:	4993      	ldr	r1, [pc, #588]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d2:	4b8e      	ldr	r3, [pc, #568]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e0:	498a      	ldr	r1, [pc, #552]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f4:	4b85      	ldr	r3, [pc, #532]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003102:	4982      	ldr	r1, [pc, #520]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003116:	4b7d      	ldr	r3, [pc, #500]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4979      	ldr	r1, [pc, #484]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003138:	4b74      	ldr	r3, [pc, #464]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4971      	ldr	r1, [pc, #452]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315a:	4b6c      	ldr	r3, [pc, #432]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f023 020c 	bic.w	r2, r3, #12
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003168:	4968      	ldr	r1, [pc, #416]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800317c:	4b63      	ldr	r3, [pc, #396]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	4960      	ldr	r1, [pc, #384]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800319e:	4b5b      	ldr	r3, [pc, #364]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ac:	4957      	ldr	r1, [pc, #348]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031c0:	4b52      	ldr	r3, [pc, #328]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	494f      	ldr	r1, [pc, #316]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031e2:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	4946      	ldr	r1, [pc, #280]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	493e      	ldr	r1, [pc, #248]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003234:	4935      	ldr	r1, [pc, #212]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003256:	492d      	ldr	r1, [pc, #180]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d011      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003278:	4924      	ldr	r1, [pc, #144]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003288:	d101      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800328a:	2301      	movs	r3, #1
 800328c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800329a:	2301      	movs	r3, #1
 800329c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	4914      	ldr	r1, [pc, #80]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032dc:	490b      	ldr	r1, [pc, #44]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00f      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003300:	4902      	ldr	r1, [pc, #8]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003308:	e002      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800331c:	4b8a      	ldr	r3, [pc, #552]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003322:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	4986      	ldr	r1, [pc, #536]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003340:	4b81      	ldr	r3, [pc, #516]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003346:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003350:	497d      	ldr	r1, [pc, #500]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d006      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80d6 	beq.w	8003518 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800336c:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003378:	f7fd ff40 	bl	80011fc <HAL_GetTick>
 800337c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003380:	f7fd ff3c 	bl	80011fc <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e195      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d021      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11d      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033b2:	4b65      	ldr	r3, [pc, #404]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033c0:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c6:	0e1b      	lsrs	r3, r3, #24
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	019a      	lsls	r2, r3, #6
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	041b      	lsls	r3, r3, #16
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	071b      	lsls	r3, r3, #28
 80033e6:	4958      	ldr	r1, [pc, #352]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02e      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003418:	d129      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800341a:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003428:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342e:	0f1b      	lsrs	r3, r3, #28
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	019a      	lsls	r2, r3, #6
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	041b      	lsls	r3, r3, #16
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	061b      	lsls	r3, r3, #24
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	071b      	lsls	r3, r3, #28
 800344e:	493e      	ldr	r1, [pc, #248]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003456:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800345c:	f023 021f 	bic.w	r2, r3, #31
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	3b01      	subs	r3, #1
 8003466:	4938      	ldr	r1, [pc, #224]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01d      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800347a:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003480:	0e1b      	lsrs	r3, r3, #24
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003488:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348e:	0f1b      	lsrs	r3, r3, #28
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	019a      	lsls	r2, r3, #6
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	071b      	lsls	r3, r3, #28
 80034ae:	4926      	ldr	r1, [pc, #152]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d011      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	019a      	lsls	r2, r3, #6
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	491a      	ldr	r1, [pc, #104]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a17      	ldr	r2, [pc, #92]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f2:	f7fd fe83 	bl	80011fc <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034fa:	f7fd fe7f 	bl	80011fc <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b64      	cmp	r3, #100	; 0x64
 8003506:	d901      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0d8      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b01      	cmp	r3, #1
 800351c:	f040 80ce 	bne.w	80036bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a08      	ldr	r2, [pc, #32]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352c:	f7fd fe66 	bl	80011fc <HAL_GetTick>
 8003530:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003532:	e00b      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003534:	f7fd fe62 	bl	80011fc <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d904      	bls.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0bb      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800354c:	4b5e      	ldr	r3, [pc, #376]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003558:	d0ec      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02e      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d12a      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003582:	4b51      	ldr	r3, [pc, #324]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003590:	4b4d      	ldr	r3, [pc, #308]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	0f1b      	lsrs	r3, r3, #28
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	019a      	lsls	r2, r3, #6
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	061b      	lsls	r3, r3, #24
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	071b      	lsls	r3, r3, #28
 80035b6:	4944      	ldr	r1, [pc, #272]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035be:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	493d      	ldr	r1, [pc, #244]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d022      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ec:	d11d      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035ee:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	0e1b      	lsrs	r3, r3, #24
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035fc:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	0f1b      	lsrs	r3, r3, #28
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	019a      	lsls	r2, r3, #6
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	431a      	orrs	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	431a      	orrs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	071b      	lsls	r3, r3, #28
 8003622:	4929      	ldr	r1, [pc, #164]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d028      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	0e1b      	lsrs	r3, r3, #24
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003644:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	0c1b      	lsrs	r3, r3, #16
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	019a      	lsls	r2, r3, #6
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	041b      	lsls	r3, r3, #16
 800365c:	431a      	orrs	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	071b      	lsls	r3, r3, #28
 800366a:	4917      	ldr	r1, [pc, #92]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	4911      	ldr	r1, [pc, #68]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0e      	ldr	r2, [pc, #56]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800368e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fd fdb2 	bl	80011fc <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800369c:	f7fd fdae 	bl	80011fc <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e007      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ba:	d1ef      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800

080036cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e049      	b.n	8003772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fb90 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f000 faca 	bl	8003ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d001      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e054      	b.n	800383e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a26      	ldr	r2, [pc, #152]	; (800384c <HAL_TIM_Base_Start_IT+0xd0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d022      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x80>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037be:	d01d      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x80>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_TIM_Base_Start_IT+0xd4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d018      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x80>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a21      	ldr	r2, [pc, #132]	; (8003854 <HAL_TIM_Base_Start_IT+0xd8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x80>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_TIM_Base_Start_IT+0xdc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00e      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x80>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <HAL_TIM_Base_Start_IT+0xe0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d009      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x80>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_TIM_Base_Start_IT+0xe4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x80>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_TIM_Base_Start_IT+0xe8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d115      	bne.n	8003828 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_TIM_Base_Start_IT+0xec>)
 8003804:	4013      	ands	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b06      	cmp	r3, #6
 800380c:	d015      	beq.n	800383a <HAL_TIM_Base_Start_IT+0xbe>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003814:	d011      	beq.n	800383a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	e008      	b.n	800383a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e000      	b.n	800383c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40010400 	.word	0x40010400
 8003860:	40014000 	.word	0x40014000
 8003864:	40001800 	.word	0x40001800
 8003868:	00010007 	.word	0x00010007

0800386c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0202 	mvn.w	r2, #2
 8003898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9da 	bl	8003c68 <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f9cc 	bl	8003c54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f9dd 	bl	8003c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d122      	bne.n	800391c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d11b      	bne.n	800391c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0204 	mvn.w	r2, #4
 80038ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f9b0 	bl	8003c68 <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f9a2 	bl	8003c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f9b3 	bl	8003c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b08      	cmp	r3, #8
 8003928:	d122      	bne.n	8003970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b08      	cmp	r3, #8
 8003936:	d11b      	bne.n	8003970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0208 	mvn.w	r2, #8
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f986 	bl	8003c68 <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f978 	bl	8003c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f989 	bl	8003c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b10      	cmp	r3, #16
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b10      	cmp	r3, #16
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0210 	mvn.w	r2, #16
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2208      	movs	r2, #8
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f95c 	bl	8003c68 <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f94e 	bl	8003c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f95f 	bl	8003c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d10e      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0201 	mvn.w	r2, #1
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f928 	bl	8003c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d10e      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d107      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fb16 	bl	8004048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2a:	d10e      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fb09 	bl	800405c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d10e      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d107      	bne.n	8003a76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f90d 	bl	8003c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d10e      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d107      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f06f 0220 	mvn.w	r2, #32
 8003a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fac9 	bl	8004034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e0b4      	b.n	8003c32 <HAL_TIM_ConfigClockSource+0x186>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <HAL_TIM_ConfigClockSource+0x190>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b00:	d03e      	beq.n	8003b80 <HAL_TIM_ConfigClockSource+0xd4>
 8003b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b06:	f200 8087 	bhi.w	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0e:	f000 8086 	beq.w	8003c1e <HAL_TIM_ConfigClockSource+0x172>
 8003b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b16:	d87f      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b70      	cmp	r3, #112	; 0x70
 8003b1a:	d01a      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0xa6>
 8003b1c:	2b70      	cmp	r3, #112	; 0x70
 8003b1e:	d87b      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b60      	cmp	r3, #96	; 0x60
 8003b22:	d050      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b24:	2b60      	cmp	r3, #96	; 0x60
 8003b26:	d877      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b50      	cmp	r3, #80	; 0x50
 8003b2a:	d03c      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b2c:	2b50      	cmp	r3, #80	; 0x50
 8003b2e:	d873      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d058      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x13a>
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d86f      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b30      	cmp	r3, #48	; 0x30
 8003b3a:	d064      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	2b30      	cmp	r3, #48	; 0x30
 8003b3e:	d86b      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d060      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x15a>
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d867      	bhi.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d05c      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x15a>
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d05a      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x15a>
 8003b50:	e062      	b.n	8003c18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6899      	ldr	r1, [r3, #8]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f000 f9b9 	bl	8003ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	609a      	str	r2, [r3, #8]
      break;
 8003b7e:	e04f      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6899      	ldr	r1, [r3, #8]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f000 f9a2 	bl	8003ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ba2:	609a      	str	r2, [r3, #8]
      break;
 8003ba4:	e03c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f000 f916 	bl	8003de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2150      	movs	r1, #80	; 0x50
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f96f 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003bc4:	e02c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f000 f935 	bl	8003e42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2160      	movs	r1, #96	; 0x60
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f95f 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003be4:	e01c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 f8f6 	bl	8003de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2140      	movs	r1, #64	; 0x40
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f94f 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003c04:	e00c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4610      	mov	r0, r2
 8003c12:	f000 f946 	bl	8003ea2 <TIM_ITRx_SetConfig>
      break;
 8003c16:	e003      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1c:	e000      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	fffeff88 	.word	0xfffeff88

08003c40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a40      	ldr	r2, [pc, #256]	; (8003db8 <TIM_Base_SetConfig+0x114>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc2:	d00f      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a3d      	ldr	r2, [pc, #244]	; (8003dbc <TIM_Base_SetConfig+0x118>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00b      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a3c      	ldr	r2, [pc, #240]	; (8003dc0 <TIM_Base_SetConfig+0x11c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d007      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a3b      	ldr	r2, [pc, #236]	; (8003dc4 <TIM_Base_SetConfig+0x120>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_Base_SetConfig+0x40>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a3a      	ldr	r2, [pc, #232]	; (8003dc8 <TIM_Base_SetConfig+0x124>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d108      	bne.n	8003cf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2f      	ldr	r2, [pc, #188]	; (8003db8 <TIM_Base_SetConfig+0x114>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d02b      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d04:	d027      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a2c      	ldr	r2, [pc, #176]	; (8003dbc <TIM_Base_SetConfig+0x118>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d023      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a2b      	ldr	r2, [pc, #172]	; (8003dc0 <TIM_Base_SetConfig+0x11c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01f      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2a      	ldr	r2, [pc, #168]	; (8003dc4 <TIM_Base_SetConfig+0x120>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01b      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a29      	ldr	r2, [pc, #164]	; (8003dc8 <TIM_Base_SetConfig+0x124>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d017      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <TIM_Base_SetConfig+0x128>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <TIM_Base_SetConfig+0x12c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00f      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <TIM_Base_SetConfig+0x130>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <TIM_Base_SetConfig+0x134>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <TIM_Base_SetConfig+0x138>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <TIM_Base_SetConfig+0x13c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d108      	bne.n	8003d68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <TIM_Base_SetConfig+0x114>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_Base_SetConfig+0xf8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <TIM_Base_SetConfig+0x124>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d103      	bne.n	8003da4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	615a      	str	r2, [r3, #20]
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	40000c00 	.word	0x40000c00
 8003dc8:	40010400 	.word	0x40010400
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800
 8003dd8:	40001800 	.word	0x40001800
 8003ddc:	40001c00 	.word	0x40001c00
 8003de0:	40002000 	.word	0x40002000

08003de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 030a 	bic.w	r3, r3, #10
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b087      	sub	sp, #28
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0210 	bic.w	r2, r3, #16
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	031b      	lsls	r3, r3, #12
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f043 0307 	orr.w	r3, r3, #7
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	609a      	str	r2, [r3, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e06d      	b.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a30      	ldr	r2, [pc, #192]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2f      	ldr	r2, [pc, #188]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d108      	bne.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d01d      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a15      	ldr	r2, [pc, #84]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10c      	bne.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40010000 	.word	0x40010000
 800401c:	40010400 	.word	0x40010400
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40000c00 	.word	0x40000c00
 800402c:	40014000 	.word	0x40014000
 8004030:	40001800 	.word	0x40001800

08004034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e040      	b.n	8004104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc ff30 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	; 0x24
 800409c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8c0 	bl	8004234 <UART_SetConfig>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e022      	b.n	8004104 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fb18 	bl	80046fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fb9f 	bl	8004840 <UART_CheckIdleState>
 8004102:	4603      	mov	r3, r0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004120:	2b20      	cmp	r3, #32
 8004122:	f040 8081 	bne.w	8004228 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_UART_Transmit+0x26>
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e079      	b.n	800422a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_UART_Transmit+0x38>
 8004140:	2302      	movs	r3, #2
 8004142:	e072      	b.n	800422a <HAL_UART_Transmit+0x11e>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2221      	movs	r2, #33	; 0x21
 8004158:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800415a:	f7fd f84f 	bl	80011fc <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	88fa      	ldrh	r2, [r7, #6]
 8004164:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004178:	d108      	bne.n	800418c <HAL_UART_Transmit+0x80>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e003      	b.n	8004194 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800419c:	e02c      	b.n	80041f8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2180      	movs	r1, #128	; 0x80
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fb92 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e038      	b.n	800422a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	3302      	adds	r3, #2
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	e007      	b.n	80041e6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	781a      	ldrb	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	3301      	adds	r3, #1
 80041e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1cc      	bne.n	800419e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	2140      	movs	r1, #64	; 0x40
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fb5f 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e005      	b.n	800422a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4ba6      	ldr	r3, [pc, #664]	; (80044f8 <UART_SetConfig+0x2c4>)
 8004260:	4013      	ands	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	430b      	orrs	r3, r1
 800426a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a94      	ldr	r2, [pc, #592]	; (80044fc <UART_SetConfig+0x2c8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d120      	bne.n	80042f2 <UART_SetConfig+0xbe>
 80042b0:	4b93      	ldr	r3, [pc, #588]	; (8004500 <UART_SetConfig+0x2cc>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d816      	bhi.n	80042ec <UART_SetConfig+0xb8>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0x90>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042e1 	.word	0x080042e1
 80042cc:	080042db 	.word	0x080042db
 80042d0:	080042e7 	.word	0x080042e7
 80042d4:	2301      	movs	r3, #1
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e150      	b.n	800457c <UART_SetConfig+0x348>
 80042da:	2302      	movs	r3, #2
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e14d      	b.n	800457c <UART_SetConfig+0x348>
 80042e0:	2304      	movs	r3, #4
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e14a      	b.n	800457c <UART_SetConfig+0x348>
 80042e6:	2308      	movs	r3, #8
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e147      	b.n	800457c <UART_SetConfig+0x348>
 80042ec:	2310      	movs	r3, #16
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e144      	b.n	800457c <UART_SetConfig+0x348>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a83      	ldr	r2, [pc, #524]	; (8004504 <UART_SetConfig+0x2d0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d132      	bne.n	8004362 <UART_SetConfig+0x12e>
 80042fc:	4b80      	ldr	r3, [pc, #512]	; (8004500 <UART_SetConfig+0x2cc>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b0c      	cmp	r3, #12
 8004308:	d828      	bhi.n	800435c <UART_SetConfig+0x128>
 800430a:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <UART_SetConfig+0xdc>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004345 	.word	0x08004345
 8004314:	0800435d 	.word	0x0800435d
 8004318:	0800435d 	.word	0x0800435d
 800431c:	0800435d 	.word	0x0800435d
 8004320:	08004351 	.word	0x08004351
 8004324:	0800435d 	.word	0x0800435d
 8004328:	0800435d 	.word	0x0800435d
 800432c:	0800435d 	.word	0x0800435d
 8004330:	0800434b 	.word	0x0800434b
 8004334:	0800435d 	.word	0x0800435d
 8004338:	0800435d 	.word	0x0800435d
 800433c:	0800435d 	.word	0x0800435d
 8004340:	08004357 	.word	0x08004357
 8004344:	2300      	movs	r3, #0
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e118      	b.n	800457c <UART_SetConfig+0x348>
 800434a:	2302      	movs	r3, #2
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e115      	b.n	800457c <UART_SetConfig+0x348>
 8004350:	2304      	movs	r3, #4
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e112      	b.n	800457c <UART_SetConfig+0x348>
 8004356:	2308      	movs	r3, #8
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e10f      	b.n	800457c <UART_SetConfig+0x348>
 800435c:	2310      	movs	r3, #16
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e10c      	b.n	800457c <UART_SetConfig+0x348>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a68      	ldr	r2, [pc, #416]	; (8004508 <UART_SetConfig+0x2d4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d120      	bne.n	80043ae <UART_SetConfig+0x17a>
 800436c:	4b64      	ldr	r3, [pc, #400]	; (8004500 <UART_SetConfig+0x2cc>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004376:	2b30      	cmp	r3, #48	; 0x30
 8004378:	d013      	beq.n	80043a2 <UART_SetConfig+0x16e>
 800437a:	2b30      	cmp	r3, #48	; 0x30
 800437c:	d814      	bhi.n	80043a8 <UART_SetConfig+0x174>
 800437e:	2b20      	cmp	r3, #32
 8004380:	d009      	beq.n	8004396 <UART_SetConfig+0x162>
 8004382:	2b20      	cmp	r3, #32
 8004384:	d810      	bhi.n	80043a8 <UART_SetConfig+0x174>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <UART_SetConfig+0x15c>
 800438a:	2b10      	cmp	r3, #16
 800438c:	d006      	beq.n	800439c <UART_SetConfig+0x168>
 800438e:	e00b      	b.n	80043a8 <UART_SetConfig+0x174>
 8004390:	2300      	movs	r3, #0
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e0f2      	b.n	800457c <UART_SetConfig+0x348>
 8004396:	2302      	movs	r3, #2
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e0ef      	b.n	800457c <UART_SetConfig+0x348>
 800439c:	2304      	movs	r3, #4
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e0ec      	b.n	800457c <UART_SetConfig+0x348>
 80043a2:	2308      	movs	r3, #8
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	e0e9      	b.n	800457c <UART_SetConfig+0x348>
 80043a8:	2310      	movs	r3, #16
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e0e6      	b.n	800457c <UART_SetConfig+0x348>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a56      	ldr	r2, [pc, #344]	; (800450c <UART_SetConfig+0x2d8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d120      	bne.n	80043fa <UART_SetConfig+0x1c6>
 80043b8:	4b51      	ldr	r3, [pc, #324]	; (8004500 <UART_SetConfig+0x2cc>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043c2:	2bc0      	cmp	r3, #192	; 0xc0
 80043c4:	d013      	beq.n	80043ee <UART_SetConfig+0x1ba>
 80043c6:	2bc0      	cmp	r3, #192	; 0xc0
 80043c8:	d814      	bhi.n	80043f4 <UART_SetConfig+0x1c0>
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d009      	beq.n	80043e2 <UART_SetConfig+0x1ae>
 80043ce:	2b80      	cmp	r3, #128	; 0x80
 80043d0:	d810      	bhi.n	80043f4 <UART_SetConfig+0x1c0>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <UART_SetConfig+0x1a8>
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d006      	beq.n	80043e8 <UART_SetConfig+0x1b4>
 80043da:	e00b      	b.n	80043f4 <UART_SetConfig+0x1c0>
 80043dc:	2300      	movs	r3, #0
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e0cc      	b.n	800457c <UART_SetConfig+0x348>
 80043e2:	2302      	movs	r3, #2
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e0c9      	b.n	800457c <UART_SetConfig+0x348>
 80043e8:	2304      	movs	r3, #4
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e0c6      	b.n	800457c <UART_SetConfig+0x348>
 80043ee:	2308      	movs	r3, #8
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e0c3      	b.n	800457c <UART_SetConfig+0x348>
 80043f4:	2310      	movs	r3, #16
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e0c0      	b.n	800457c <UART_SetConfig+0x348>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a44      	ldr	r2, [pc, #272]	; (8004510 <UART_SetConfig+0x2dc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d125      	bne.n	8004450 <UART_SetConfig+0x21c>
 8004404:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <UART_SetConfig+0x2cc>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004412:	d017      	beq.n	8004444 <UART_SetConfig+0x210>
 8004414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004418:	d817      	bhi.n	800444a <UART_SetConfig+0x216>
 800441a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441e:	d00b      	beq.n	8004438 <UART_SetConfig+0x204>
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d811      	bhi.n	800444a <UART_SetConfig+0x216>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <UART_SetConfig+0x1fe>
 800442a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442e:	d006      	beq.n	800443e <UART_SetConfig+0x20a>
 8004430:	e00b      	b.n	800444a <UART_SetConfig+0x216>
 8004432:	2300      	movs	r3, #0
 8004434:	77fb      	strb	r3, [r7, #31]
 8004436:	e0a1      	b.n	800457c <UART_SetConfig+0x348>
 8004438:	2302      	movs	r3, #2
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e09e      	b.n	800457c <UART_SetConfig+0x348>
 800443e:	2304      	movs	r3, #4
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e09b      	b.n	800457c <UART_SetConfig+0x348>
 8004444:	2308      	movs	r3, #8
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e098      	b.n	800457c <UART_SetConfig+0x348>
 800444a:	2310      	movs	r3, #16
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e095      	b.n	800457c <UART_SetConfig+0x348>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a2f      	ldr	r2, [pc, #188]	; (8004514 <UART_SetConfig+0x2e0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d125      	bne.n	80044a6 <UART_SetConfig+0x272>
 800445a:	4b29      	ldr	r3, [pc, #164]	; (8004500 <UART_SetConfig+0x2cc>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004468:	d017      	beq.n	800449a <UART_SetConfig+0x266>
 800446a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800446e:	d817      	bhi.n	80044a0 <UART_SetConfig+0x26c>
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d00b      	beq.n	800448e <UART_SetConfig+0x25a>
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447a:	d811      	bhi.n	80044a0 <UART_SetConfig+0x26c>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <UART_SetConfig+0x254>
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004484:	d006      	beq.n	8004494 <UART_SetConfig+0x260>
 8004486:	e00b      	b.n	80044a0 <UART_SetConfig+0x26c>
 8004488:	2301      	movs	r3, #1
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e076      	b.n	800457c <UART_SetConfig+0x348>
 800448e:	2302      	movs	r3, #2
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e073      	b.n	800457c <UART_SetConfig+0x348>
 8004494:	2304      	movs	r3, #4
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e070      	b.n	800457c <UART_SetConfig+0x348>
 800449a:	2308      	movs	r3, #8
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e06d      	b.n	800457c <UART_SetConfig+0x348>
 80044a0:	2310      	movs	r3, #16
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e06a      	b.n	800457c <UART_SetConfig+0x348>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <UART_SetConfig+0x2e4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d138      	bne.n	8004522 <UART_SetConfig+0x2ee>
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <UART_SetConfig+0x2cc>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80044ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044be:	d017      	beq.n	80044f0 <UART_SetConfig+0x2bc>
 80044c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044c4:	d82a      	bhi.n	800451c <UART_SetConfig+0x2e8>
 80044c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ca:	d00b      	beq.n	80044e4 <UART_SetConfig+0x2b0>
 80044cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d0:	d824      	bhi.n	800451c <UART_SetConfig+0x2e8>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <UART_SetConfig+0x2aa>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044da:	d006      	beq.n	80044ea <UART_SetConfig+0x2b6>
 80044dc:	e01e      	b.n	800451c <UART_SetConfig+0x2e8>
 80044de:	2300      	movs	r3, #0
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e04b      	b.n	800457c <UART_SetConfig+0x348>
 80044e4:	2302      	movs	r3, #2
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e048      	b.n	800457c <UART_SetConfig+0x348>
 80044ea:	2304      	movs	r3, #4
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e045      	b.n	800457c <UART_SetConfig+0x348>
 80044f0:	2308      	movs	r3, #8
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e042      	b.n	800457c <UART_SetConfig+0x348>
 80044f6:	bf00      	nop
 80044f8:	efff69f3 	.word	0xefff69f3
 80044fc:	40011000 	.word	0x40011000
 8004500:	40023800 	.word	0x40023800
 8004504:	40004400 	.word	0x40004400
 8004508:	40004800 	.word	0x40004800
 800450c:	40004c00 	.word	0x40004c00
 8004510:	40005000 	.word	0x40005000
 8004514:	40011400 	.word	0x40011400
 8004518:	40007800 	.word	0x40007800
 800451c:	2310      	movs	r3, #16
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e02c      	b.n	800457c <UART_SetConfig+0x348>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a72      	ldr	r2, [pc, #456]	; (80046f0 <UART_SetConfig+0x4bc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d125      	bne.n	8004578 <UART_SetConfig+0x344>
 800452c:	4b71      	ldr	r3, [pc, #452]	; (80046f4 <UART_SetConfig+0x4c0>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004536:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800453a:	d017      	beq.n	800456c <UART_SetConfig+0x338>
 800453c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004540:	d817      	bhi.n	8004572 <UART_SetConfig+0x33e>
 8004542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004546:	d00b      	beq.n	8004560 <UART_SetConfig+0x32c>
 8004548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454c:	d811      	bhi.n	8004572 <UART_SetConfig+0x33e>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <UART_SetConfig+0x326>
 8004552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004556:	d006      	beq.n	8004566 <UART_SetConfig+0x332>
 8004558:	e00b      	b.n	8004572 <UART_SetConfig+0x33e>
 800455a:	2300      	movs	r3, #0
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e00d      	b.n	800457c <UART_SetConfig+0x348>
 8004560:	2302      	movs	r3, #2
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e00a      	b.n	800457c <UART_SetConfig+0x348>
 8004566:	2304      	movs	r3, #4
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e007      	b.n	800457c <UART_SetConfig+0x348>
 800456c:	2308      	movs	r3, #8
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e004      	b.n	800457c <UART_SetConfig+0x348>
 8004572:	2310      	movs	r3, #16
 8004574:	77fb      	strb	r3, [r7, #31]
 8004576:	e001      	b.n	800457c <UART_SetConfig+0x348>
 8004578:	2310      	movs	r3, #16
 800457a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004584:	d15b      	bne.n	800463e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d828      	bhi.n	80045de <UART_SetConfig+0x3aa>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <UART_SetConfig+0x360>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045b9 	.word	0x080045b9
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045c9 	.word	0x080045c9
 80045a0:	080045df 	.word	0x080045df
 80045a4:	080045cf 	.word	0x080045cf
 80045a8:	080045df 	.word	0x080045df
 80045ac:	080045df 	.word	0x080045df
 80045b0:	080045df 	.word	0x080045df
 80045b4:	080045d7 	.word	0x080045d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7fe fc38 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80045bc:	61b8      	str	r0, [r7, #24]
        break;
 80045be:	e013      	b.n	80045e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c0:	f7fe fc48 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 80045c4:	61b8      	str	r0, [r7, #24]
        break;
 80045c6:	e00f      	b.n	80045e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c8:	4b4b      	ldr	r3, [pc, #300]	; (80046f8 <UART_SetConfig+0x4c4>)
 80045ca:	61bb      	str	r3, [r7, #24]
        break;
 80045cc:	e00c      	b.n	80045e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ce:	f7fe fb1b 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 80045d2:	61b8      	str	r0, [r7, #24]
        break;
 80045d4:	e008      	b.n	80045e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045da:	61bb      	str	r3, [r7, #24]
        break;
 80045dc:	e004      	b.n	80045e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	77bb      	strb	r3, [r7, #30]
        break;
 80045e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d074      	beq.n	80046d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	005a      	lsls	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	441a      	add	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004602:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b0f      	cmp	r3, #15
 8004608:	d916      	bls.n	8004638 <UART_SetConfig+0x404>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d212      	bcs.n	8004638 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f023 030f 	bic.w	r3, r3, #15
 800461a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	b29a      	uxth	r2, r3
 8004628:	89fb      	ldrh	r3, [r7, #14]
 800462a:	4313      	orrs	r3, r2
 800462c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	89fa      	ldrh	r2, [r7, #14]
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	e04f      	b.n	80046d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	77bb      	strb	r3, [r7, #30]
 800463c:	e04c      	b.n	80046d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800463e:	7ffb      	ldrb	r3, [r7, #31]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d828      	bhi.n	8004696 <UART_SetConfig+0x462>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <UART_SetConfig+0x418>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004671 	.word	0x08004671
 8004650:	08004679 	.word	0x08004679
 8004654:	08004681 	.word	0x08004681
 8004658:	08004697 	.word	0x08004697
 800465c:	08004687 	.word	0x08004687
 8004660:	08004697 	.word	0x08004697
 8004664:	08004697 	.word	0x08004697
 8004668:	08004697 	.word	0x08004697
 800466c:	0800468f 	.word	0x0800468f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004670:	f7fe fbdc 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 8004674:	61b8      	str	r0, [r7, #24]
        break;
 8004676:	e013      	b.n	80046a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004678:	f7fe fbec 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 800467c:	61b8      	str	r0, [r7, #24]
        break;
 800467e:	e00f      	b.n	80046a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004680:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <UART_SetConfig+0x4c4>)
 8004682:	61bb      	str	r3, [r7, #24]
        break;
 8004684:	e00c      	b.n	80046a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004686:	f7fe fabf 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 800468a:	61b8      	str	r0, [r7, #24]
        break;
 800468c:	e008      	b.n	80046a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004692:	61bb      	str	r3, [r7, #24]
        break;
 8004694:	e004      	b.n	80046a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	77bb      	strb	r3, [r7, #30]
        break;
 800469e:	bf00      	nop
    }

    if (pclk != 0U)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d018      	beq.n	80046d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	085a      	lsrs	r2, r3, #1
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b0f      	cmp	r3, #15
 80046be:	d909      	bls.n	80046d4 <UART_SetConfig+0x4a0>
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c6:	d205      	bcs.n	80046d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e001      	b.n	80046d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40007c00 	.word	0x40007c00
 80046f4:	40023800 	.word	0x40023800
 80046f8:	00f42400 	.word	0x00f42400

080046fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01a      	beq.n	8004812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fa:	d10a      	bne.n	8004812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af02      	add	r7, sp, #8
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004850:	f7fc fcd4 	bl	80011fc <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b08      	cmp	r3, #8
 8004862:	d10e      	bne.n	8004882 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f82d 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e023      	b.n	80048ca <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d10e      	bne.n	80048ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f817 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e00d      	b.n	80048ca <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b09c      	sub	sp, #112	; 0x70
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e2:	e0a5      	b.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	f000 80a1 	beq.w	8004a30 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fc fc85 	bl	80011fc <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <UART_WaitOnFlagUntilTimeout+0x32>
 80048fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004900:	2b00      	cmp	r3, #0
 8004902:	d13e      	bne.n	8004982 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004918:	667b      	str	r3, [r7, #100]	; 0x64
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004924:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004928:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e6      	bne.n	8004904 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3308      	adds	r3, #8
 800493c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	663b      	str	r3, [r7, #96]	; 0x60
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3308      	adds	r3, #8
 8004954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004956:	64ba      	str	r2, [r7, #72]	; 0x48
 8004958:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800495c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e5      	bne.n	8004936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e067      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d04f      	beq.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800499e:	d147      	bne.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e6      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	613b      	str	r3, [r7, #16]
   return(result);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049fc:	623a      	str	r2, [r7, #32]
 80049fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	69f9      	ldr	r1, [r7, #28]
 8004a02:	6a3a      	ldr	r2, [r7, #32]
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e5      	bne.n	80049dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e010      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69da      	ldr	r2, [r3, #28]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	f43f af4a 	beq.w	80048e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3770      	adds	r7, #112	; 0x70
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	f107 001c 	add.w	r0, r7, #28
 8004a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d120      	bne.n	8004ab6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <USB_CoreInit+0xac>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa92 	bl	8004fd4 <USB_CoreReset>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]
 8004ab4:	e010      	b.n	8004ad8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa86 	bl	8004fd4 <USB_CoreReset>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d10b      	bne.n	8004af6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f043 0206 	orr.w	r2, r3, #6
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b02:	b004      	add	sp, #16
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	ffbdffbf 	.word	0xffbdffbf

08004b0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f023 0201 	bic.w	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d115      	bne.n	8004b7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f7fc fb59 	bl	8001214 <HAL_Delay>
      ms++;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3301      	adds	r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa25 	bl	8004fb8 <USB_GetMode>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d01e      	beq.n	8004bb2 <USB_SetCurrentMode+0x84>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b31      	cmp	r3, #49	; 0x31
 8004b78:	d9f0      	bls.n	8004b5c <USB_SetCurrentMode+0x2e>
 8004b7a:	e01a      	b.n	8004bb2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d115      	bne.n	8004bae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f7fc fb40 	bl	8001214 <HAL_Delay>
      ms++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fa0c 	bl	8004fb8 <USB_GetMode>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <USB_SetCurrentMode+0x84>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b31      	cmp	r3, #49	; 0x31
 8004baa:	d9f0      	bls.n	8004b8e <USB_SetCurrentMode+0x60>
 8004bac:	e001      	b.n	8004bb2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e005      	b.n	8004bbe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b32      	cmp	r3, #50	; 0x32
 8004bb6:	d101      	bne.n	8004bbc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bc8:	b084      	sub	sp, #16
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004be2:	2300      	movs	r3, #0
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	e009      	b.n	8004bfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3340      	adds	r3, #64	; 0x40
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b0e      	cmp	r3, #14
 8004c00:	d9f2      	bls.n	8004be8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d11c      	bne.n	8004c42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c16:	f043 0302 	orr.w	r3, r3, #2
 8004c1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e005      	b.n	8004c4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c54:	461a      	mov	r2, r3
 8004c56:	2300      	movs	r3, #0
 8004c58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	4619      	mov	r1, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	461a      	mov	r2, r3
 8004c6a:	680b      	ldr	r3, [r1, #0]
 8004c6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d10c      	bne.n	8004c8e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f961 	bl	8004f44 <USB_SetDevSpeed>
 8004c82:	e008      	b.n	8004c96 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c84:	2101      	movs	r1, #1
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f95c 	bl	8004f44 <USB_SetDevSpeed>
 8004c8c:	e003      	b.n	8004c96 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c8e:	2103      	movs	r1, #3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f957 	bl	8004f44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c96:	2110      	movs	r1, #16
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f8f3 	bl	8004e84 <USB_FlushTxFifo>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f91d 	bl	8004ee8 <USB_FlushRxFifo>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e043      	b.n	8004d6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cf8:	d118      	bne.n	8004d2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e013      	b.n	8004d3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	461a      	mov	r2, r3
 8004d24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e008      	b.n	8004d3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	3301      	adds	r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d3b7      	bcc.n	8004ce2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e043      	b.n	8004e00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d8e:	d118      	bne.n	8004dc2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	461a      	mov	r2, r3
 8004da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e013      	b.n	8004dd4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	461a      	mov	r2, r3
 8004dba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	e008      	b.n	8004dd4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	461a      	mov	r2, r3
 8004de2:	2300      	movs	r3, #0
 8004de4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	461a      	mov	r2, r3
 8004df4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004df8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d3b7      	bcc.n	8004d78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f043 0210 	orr.w	r2, r3, #16
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <USB_DevInit+0x2b4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f043 0208 	orr.w	r2, r3, #8
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d105      	bne.n	8004e6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <USB_DevInit+0x2b8>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e78:	b004      	add	sp, #16
 8004e7a:	4770      	bx	lr
 8004e7c:	803c3800 	.word	0x803c3800
 8004e80:	40000004 	.word	0x40000004

08004e84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3301      	adds	r3, #1
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <USB_FlushTxFifo+0x60>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e01a      	b.n	8004ed8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	daf3      	bge.n	8004e92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	019b      	lsls	r3, r3, #6
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <USB_FlushTxFifo+0x60>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e006      	b.n	8004ed8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d0f1      	beq.n	8004eba <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	00030d40 	.word	0x00030d40

08004ee8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <USB_FlushRxFifo+0x58>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e017      	b.n	8004f34 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	daf3      	bge.n	8004ef4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2210      	movs	r2, #16
 8004f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <USB_FlushRxFifo+0x58>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e006      	b.n	8004f34 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d0f1      	beq.n	8004f16 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	00030d40 	.word	0x00030d40

08004f44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f90:	f023 0303 	bic.w	r3, r3, #3
 8004f94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <USB_CoreReset+0x60>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d901      	bls.n	8004ff0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e01a      	b.n	8005026 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	daf3      	bge.n	8004fe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f043 0201 	orr.w	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3301      	adds	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <USB_CoreReset+0x60>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e006      	b.n	8005026 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d0f1      	beq.n	8005008 <USB_CoreReset+0x34>

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	00030d40 	.word	0x00030d40

08005038 <__errno>:
 8005038:	4b01      	ldr	r3, [pc, #4]	; (8005040 <__errno+0x8>)
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000010 	.word	0x20000010

08005044 <__libc_init_array>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4d0d      	ldr	r5, [pc, #52]	; (800507c <__libc_init_array+0x38>)
 8005048:	4c0d      	ldr	r4, [pc, #52]	; (8005080 <__libc_init_array+0x3c>)
 800504a:	1b64      	subs	r4, r4, r5
 800504c:	10a4      	asrs	r4, r4, #2
 800504e:	2600      	movs	r6, #0
 8005050:	42a6      	cmp	r6, r4
 8005052:	d109      	bne.n	8005068 <__libc_init_array+0x24>
 8005054:	4d0b      	ldr	r5, [pc, #44]	; (8005084 <__libc_init_array+0x40>)
 8005056:	4c0c      	ldr	r4, [pc, #48]	; (8005088 <__libc_init_array+0x44>)
 8005058:	f000 fc8e 	bl	8005978 <_init>
 800505c:	1b64      	subs	r4, r4, r5
 800505e:	10a4      	asrs	r4, r4, #2
 8005060:	2600      	movs	r6, #0
 8005062:	42a6      	cmp	r6, r4
 8005064:	d105      	bne.n	8005072 <__libc_init_array+0x2e>
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	f855 3b04 	ldr.w	r3, [r5], #4
 800506c:	4798      	blx	r3
 800506e:	3601      	adds	r6, #1
 8005070:	e7ee      	b.n	8005050 <__libc_init_array+0xc>
 8005072:	f855 3b04 	ldr.w	r3, [r5], #4
 8005076:	4798      	blx	r3
 8005078:	3601      	adds	r6, #1
 800507a:	e7f2      	b.n	8005062 <__libc_init_array+0x1e>
 800507c:	08005a00 	.word	0x08005a00
 8005080:	08005a00 	.word	0x08005a00
 8005084:	08005a00 	.word	0x08005a00
 8005088:	08005a04 	.word	0x08005a04

0800508c <memset>:
 800508c:	4402      	add	r2, r0
 800508e:	4603      	mov	r3, r0
 8005090:	4293      	cmp	r3, r2
 8005092:	d100      	bne.n	8005096 <memset+0xa>
 8005094:	4770      	bx	lr
 8005096:	f803 1b01 	strb.w	r1, [r3], #1
 800509a:	e7f9      	b.n	8005090 <memset+0x4>

0800509c <siprintf>:
 800509c:	b40e      	push	{r1, r2, r3}
 800509e:	b500      	push	{lr}
 80050a0:	b09c      	sub	sp, #112	; 0x70
 80050a2:	ab1d      	add	r3, sp, #116	; 0x74
 80050a4:	9002      	str	r0, [sp, #8]
 80050a6:	9006      	str	r0, [sp, #24]
 80050a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050ac:	4809      	ldr	r0, [pc, #36]	; (80050d4 <siprintf+0x38>)
 80050ae:	9107      	str	r1, [sp, #28]
 80050b0:	9104      	str	r1, [sp, #16]
 80050b2:	4909      	ldr	r1, [pc, #36]	; (80050d8 <siprintf+0x3c>)
 80050b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050b8:	9105      	str	r1, [sp, #20]
 80050ba:	6800      	ldr	r0, [r0, #0]
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	a902      	add	r1, sp, #8
 80050c0:	f000 f868 	bl	8005194 <_svfiprintf_r>
 80050c4:	9b02      	ldr	r3, [sp, #8]
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	b01c      	add	sp, #112	; 0x70
 80050cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80050d0:	b003      	add	sp, #12
 80050d2:	4770      	bx	lr
 80050d4:	20000010 	.word	0x20000010
 80050d8:	ffff0208 	.word	0xffff0208

080050dc <__ssputs_r>:
 80050dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e0:	688e      	ldr	r6, [r1, #8]
 80050e2:	429e      	cmp	r6, r3
 80050e4:	4682      	mov	sl, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	4690      	mov	r8, r2
 80050ea:	461f      	mov	r7, r3
 80050ec:	d838      	bhi.n	8005160 <__ssputs_r+0x84>
 80050ee:	898a      	ldrh	r2, [r1, #12]
 80050f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050f4:	d032      	beq.n	800515c <__ssputs_r+0x80>
 80050f6:	6825      	ldr	r5, [r4, #0]
 80050f8:	6909      	ldr	r1, [r1, #16]
 80050fa:	eba5 0901 	sub.w	r9, r5, r1
 80050fe:	6965      	ldr	r5, [r4, #20]
 8005100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005108:	3301      	adds	r3, #1
 800510a:	444b      	add	r3, r9
 800510c:	106d      	asrs	r5, r5, #1
 800510e:	429d      	cmp	r5, r3
 8005110:	bf38      	it	cc
 8005112:	461d      	movcc	r5, r3
 8005114:	0553      	lsls	r3, r2, #21
 8005116:	d531      	bpl.n	800517c <__ssputs_r+0xa0>
 8005118:	4629      	mov	r1, r5
 800511a:	f000 fb63 	bl	80057e4 <_malloc_r>
 800511e:	4606      	mov	r6, r0
 8005120:	b950      	cbnz	r0, 8005138 <__ssputs_r+0x5c>
 8005122:	230c      	movs	r3, #12
 8005124:	f8ca 3000 	str.w	r3, [sl]
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005138:	6921      	ldr	r1, [r4, #16]
 800513a:	464a      	mov	r2, r9
 800513c:	f000 fabe 	bl	80056bc <memcpy>
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	6126      	str	r6, [r4, #16]
 800514e:	6165      	str	r5, [r4, #20]
 8005150:	444e      	add	r6, r9
 8005152:	eba5 0509 	sub.w	r5, r5, r9
 8005156:	6026      	str	r6, [r4, #0]
 8005158:	60a5      	str	r5, [r4, #8]
 800515a:	463e      	mov	r6, r7
 800515c:	42be      	cmp	r6, r7
 800515e:	d900      	bls.n	8005162 <__ssputs_r+0x86>
 8005160:	463e      	mov	r6, r7
 8005162:	6820      	ldr	r0, [r4, #0]
 8005164:	4632      	mov	r2, r6
 8005166:	4641      	mov	r1, r8
 8005168:	f000 fab6 	bl	80056d8 <memmove>
 800516c:	68a3      	ldr	r3, [r4, #8]
 800516e:	1b9b      	subs	r3, r3, r6
 8005170:	60a3      	str	r3, [r4, #8]
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	4433      	add	r3, r6
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	2000      	movs	r0, #0
 800517a:	e7db      	b.n	8005134 <__ssputs_r+0x58>
 800517c:	462a      	mov	r2, r5
 800517e:	f000 fba5 	bl	80058cc <_realloc_r>
 8005182:	4606      	mov	r6, r0
 8005184:	2800      	cmp	r0, #0
 8005186:	d1e1      	bne.n	800514c <__ssputs_r+0x70>
 8005188:	6921      	ldr	r1, [r4, #16]
 800518a:	4650      	mov	r0, sl
 800518c:	f000 fabe 	bl	800570c <_free_r>
 8005190:	e7c7      	b.n	8005122 <__ssputs_r+0x46>
	...

08005194 <_svfiprintf_r>:
 8005194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005198:	4698      	mov	r8, r3
 800519a:	898b      	ldrh	r3, [r1, #12]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	b09d      	sub	sp, #116	; 0x74
 80051a0:	4607      	mov	r7, r0
 80051a2:	460d      	mov	r5, r1
 80051a4:	4614      	mov	r4, r2
 80051a6:	d50e      	bpl.n	80051c6 <_svfiprintf_r+0x32>
 80051a8:	690b      	ldr	r3, [r1, #16]
 80051aa:	b963      	cbnz	r3, 80051c6 <_svfiprintf_r+0x32>
 80051ac:	2140      	movs	r1, #64	; 0x40
 80051ae:	f000 fb19 	bl	80057e4 <_malloc_r>
 80051b2:	6028      	str	r0, [r5, #0]
 80051b4:	6128      	str	r0, [r5, #16]
 80051b6:	b920      	cbnz	r0, 80051c2 <_svfiprintf_r+0x2e>
 80051b8:	230c      	movs	r3, #12
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	e0d1      	b.n	8005366 <_svfiprintf_r+0x1d2>
 80051c2:	2340      	movs	r3, #64	; 0x40
 80051c4:	616b      	str	r3, [r5, #20]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ca:	2320      	movs	r3, #32
 80051cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051d4:	2330      	movs	r3, #48	; 0x30
 80051d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005380 <_svfiprintf_r+0x1ec>
 80051da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051de:	f04f 0901 	mov.w	r9, #1
 80051e2:	4623      	mov	r3, r4
 80051e4:	469a      	mov	sl, r3
 80051e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ea:	b10a      	cbz	r2, 80051f0 <_svfiprintf_r+0x5c>
 80051ec:	2a25      	cmp	r2, #37	; 0x25
 80051ee:	d1f9      	bne.n	80051e4 <_svfiprintf_r+0x50>
 80051f0:	ebba 0b04 	subs.w	fp, sl, r4
 80051f4:	d00b      	beq.n	800520e <_svfiprintf_r+0x7a>
 80051f6:	465b      	mov	r3, fp
 80051f8:	4622      	mov	r2, r4
 80051fa:	4629      	mov	r1, r5
 80051fc:	4638      	mov	r0, r7
 80051fe:	f7ff ff6d 	bl	80050dc <__ssputs_r>
 8005202:	3001      	adds	r0, #1
 8005204:	f000 80aa 	beq.w	800535c <_svfiprintf_r+0x1c8>
 8005208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800520a:	445a      	add	r2, fp
 800520c:	9209      	str	r2, [sp, #36]	; 0x24
 800520e:	f89a 3000 	ldrb.w	r3, [sl]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80a2 	beq.w	800535c <_svfiprintf_r+0x1c8>
 8005218:	2300      	movs	r3, #0
 800521a:	f04f 32ff 	mov.w	r2, #4294967295
 800521e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005222:	f10a 0a01 	add.w	sl, sl, #1
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	9307      	str	r3, [sp, #28]
 800522a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800522e:	931a      	str	r3, [sp, #104]	; 0x68
 8005230:	4654      	mov	r4, sl
 8005232:	2205      	movs	r2, #5
 8005234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005238:	4851      	ldr	r0, [pc, #324]	; (8005380 <_svfiprintf_r+0x1ec>)
 800523a:	f7fb f809 	bl	8000250 <memchr>
 800523e:	9a04      	ldr	r2, [sp, #16]
 8005240:	b9d8      	cbnz	r0, 800527a <_svfiprintf_r+0xe6>
 8005242:	06d0      	lsls	r0, r2, #27
 8005244:	bf44      	itt	mi
 8005246:	2320      	movmi	r3, #32
 8005248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800524c:	0711      	lsls	r1, r2, #28
 800524e:	bf44      	itt	mi
 8005250:	232b      	movmi	r3, #43	; 0x2b
 8005252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005256:	f89a 3000 	ldrb.w	r3, [sl]
 800525a:	2b2a      	cmp	r3, #42	; 0x2a
 800525c:	d015      	beq.n	800528a <_svfiprintf_r+0xf6>
 800525e:	9a07      	ldr	r2, [sp, #28]
 8005260:	4654      	mov	r4, sl
 8005262:	2000      	movs	r0, #0
 8005264:	f04f 0c0a 	mov.w	ip, #10
 8005268:	4621      	mov	r1, r4
 800526a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800526e:	3b30      	subs	r3, #48	; 0x30
 8005270:	2b09      	cmp	r3, #9
 8005272:	d94e      	bls.n	8005312 <_svfiprintf_r+0x17e>
 8005274:	b1b0      	cbz	r0, 80052a4 <_svfiprintf_r+0x110>
 8005276:	9207      	str	r2, [sp, #28]
 8005278:	e014      	b.n	80052a4 <_svfiprintf_r+0x110>
 800527a:	eba0 0308 	sub.w	r3, r0, r8
 800527e:	fa09 f303 	lsl.w	r3, r9, r3
 8005282:	4313      	orrs	r3, r2
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	46a2      	mov	sl, r4
 8005288:	e7d2      	b.n	8005230 <_svfiprintf_r+0x9c>
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	1d19      	adds	r1, r3, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	9103      	str	r1, [sp, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfbb      	ittet	lt
 8005296:	425b      	neglt	r3, r3
 8005298:	f042 0202 	orrlt.w	r2, r2, #2
 800529c:	9307      	strge	r3, [sp, #28]
 800529e:	9307      	strlt	r3, [sp, #28]
 80052a0:	bfb8      	it	lt
 80052a2:	9204      	strlt	r2, [sp, #16]
 80052a4:	7823      	ldrb	r3, [r4, #0]
 80052a6:	2b2e      	cmp	r3, #46	; 0x2e
 80052a8:	d10c      	bne.n	80052c4 <_svfiprintf_r+0x130>
 80052aa:	7863      	ldrb	r3, [r4, #1]
 80052ac:	2b2a      	cmp	r3, #42	; 0x2a
 80052ae:	d135      	bne.n	800531c <_svfiprintf_r+0x188>
 80052b0:	9b03      	ldr	r3, [sp, #12]
 80052b2:	1d1a      	adds	r2, r3, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	9203      	str	r2, [sp, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bfb8      	it	lt
 80052bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80052c0:	3402      	adds	r4, #2
 80052c2:	9305      	str	r3, [sp, #20]
 80052c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005390 <_svfiprintf_r+0x1fc>
 80052c8:	7821      	ldrb	r1, [r4, #0]
 80052ca:	2203      	movs	r2, #3
 80052cc:	4650      	mov	r0, sl
 80052ce:	f7fa ffbf 	bl	8000250 <memchr>
 80052d2:	b140      	cbz	r0, 80052e6 <_svfiprintf_r+0x152>
 80052d4:	2340      	movs	r3, #64	; 0x40
 80052d6:	eba0 000a 	sub.w	r0, r0, sl
 80052da:	fa03 f000 	lsl.w	r0, r3, r0
 80052de:	9b04      	ldr	r3, [sp, #16]
 80052e0:	4303      	orrs	r3, r0
 80052e2:	3401      	adds	r4, #1
 80052e4:	9304      	str	r3, [sp, #16]
 80052e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ea:	4826      	ldr	r0, [pc, #152]	; (8005384 <_svfiprintf_r+0x1f0>)
 80052ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052f0:	2206      	movs	r2, #6
 80052f2:	f7fa ffad 	bl	8000250 <memchr>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d038      	beq.n	800536c <_svfiprintf_r+0x1d8>
 80052fa:	4b23      	ldr	r3, [pc, #140]	; (8005388 <_svfiprintf_r+0x1f4>)
 80052fc:	bb1b      	cbnz	r3, 8005346 <_svfiprintf_r+0x1b2>
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	3307      	adds	r3, #7
 8005302:	f023 0307 	bic.w	r3, r3, #7
 8005306:	3308      	adds	r3, #8
 8005308:	9303      	str	r3, [sp, #12]
 800530a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530c:	4433      	add	r3, r6
 800530e:	9309      	str	r3, [sp, #36]	; 0x24
 8005310:	e767      	b.n	80051e2 <_svfiprintf_r+0x4e>
 8005312:	fb0c 3202 	mla	r2, ip, r2, r3
 8005316:	460c      	mov	r4, r1
 8005318:	2001      	movs	r0, #1
 800531a:	e7a5      	b.n	8005268 <_svfiprintf_r+0xd4>
 800531c:	2300      	movs	r3, #0
 800531e:	3401      	adds	r4, #1
 8005320:	9305      	str	r3, [sp, #20]
 8005322:	4619      	mov	r1, r3
 8005324:	f04f 0c0a 	mov.w	ip, #10
 8005328:	4620      	mov	r0, r4
 800532a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800532e:	3a30      	subs	r2, #48	; 0x30
 8005330:	2a09      	cmp	r2, #9
 8005332:	d903      	bls.n	800533c <_svfiprintf_r+0x1a8>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0c5      	beq.n	80052c4 <_svfiprintf_r+0x130>
 8005338:	9105      	str	r1, [sp, #20]
 800533a:	e7c3      	b.n	80052c4 <_svfiprintf_r+0x130>
 800533c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005340:	4604      	mov	r4, r0
 8005342:	2301      	movs	r3, #1
 8005344:	e7f0      	b.n	8005328 <_svfiprintf_r+0x194>
 8005346:	ab03      	add	r3, sp, #12
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	462a      	mov	r2, r5
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <_svfiprintf_r+0x1f8>)
 800534e:	a904      	add	r1, sp, #16
 8005350:	4638      	mov	r0, r7
 8005352:	f3af 8000 	nop.w
 8005356:	1c42      	adds	r2, r0, #1
 8005358:	4606      	mov	r6, r0
 800535a:	d1d6      	bne.n	800530a <_svfiprintf_r+0x176>
 800535c:	89ab      	ldrh	r3, [r5, #12]
 800535e:	065b      	lsls	r3, r3, #25
 8005360:	f53f af2c 	bmi.w	80051bc <_svfiprintf_r+0x28>
 8005364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005366:	b01d      	add	sp, #116	; 0x74
 8005368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536c:	ab03      	add	r3, sp, #12
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	462a      	mov	r2, r5
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <_svfiprintf_r+0x1f8>)
 8005374:	a904      	add	r1, sp, #16
 8005376:	4638      	mov	r0, r7
 8005378:	f000 f87a 	bl	8005470 <_printf_i>
 800537c:	e7eb      	b.n	8005356 <_svfiprintf_r+0x1c2>
 800537e:	bf00      	nop
 8005380:	080059c4 	.word	0x080059c4
 8005384:	080059ce 	.word	0x080059ce
 8005388:	00000000 	.word	0x00000000
 800538c:	080050dd 	.word	0x080050dd
 8005390:	080059ca 	.word	0x080059ca

08005394 <_printf_common>:
 8005394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	4616      	mov	r6, r2
 800539a:	4699      	mov	r9, r3
 800539c:	688a      	ldr	r2, [r1, #8]
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053a4:	4293      	cmp	r3, r2
 80053a6:	bfb8      	it	lt
 80053a8:	4613      	movlt	r3, r2
 80053aa:	6033      	str	r3, [r6, #0]
 80053ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053b0:	4607      	mov	r7, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	b10a      	cbz	r2, 80053ba <_printf_common+0x26>
 80053b6:	3301      	adds	r3, #1
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	0699      	lsls	r1, r3, #26
 80053be:	bf42      	ittt	mi
 80053c0:	6833      	ldrmi	r3, [r6, #0]
 80053c2:	3302      	addmi	r3, #2
 80053c4:	6033      	strmi	r3, [r6, #0]
 80053c6:	6825      	ldr	r5, [r4, #0]
 80053c8:	f015 0506 	ands.w	r5, r5, #6
 80053cc:	d106      	bne.n	80053dc <_printf_common+0x48>
 80053ce:	f104 0a19 	add.w	sl, r4, #25
 80053d2:	68e3      	ldr	r3, [r4, #12]
 80053d4:	6832      	ldr	r2, [r6, #0]
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	42ab      	cmp	r3, r5
 80053da:	dc26      	bgt.n	800542a <_printf_common+0x96>
 80053dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e0:	1e13      	subs	r3, r2, #0
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	bf18      	it	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	0692      	lsls	r2, r2, #26
 80053ea:	d42b      	bmi.n	8005444 <_printf_common+0xb0>
 80053ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f0:	4649      	mov	r1, r9
 80053f2:	4638      	mov	r0, r7
 80053f4:	47c0      	blx	r8
 80053f6:	3001      	adds	r0, #1
 80053f8:	d01e      	beq.n	8005438 <_printf_common+0xa4>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	68e5      	ldr	r5, [r4, #12]
 80053fe:	6832      	ldr	r2, [r6, #0]
 8005400:	f003 0306 	and.w	r3, r3, #6
 8005404:	2b04      	cmp	r3, #4
 8005406:	bf08      	it	eq
 8005408:	1aad      	subeq	r5, r5, r2
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	bf0c      	ite	eq
 8005410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005414:	2500      	movne	r5, #0
 8005416:	4293      	cmp	r3, r2
 8005418:	bfc4      	itt	gt
 800541a:	1a9b      	subgt	r3, r3, r2
 800541c:	18ed      	addgt	r5, r5, r3
 800541e:	2600      	movs	r6, #0
 8005420:	341a      	adds	r4, #26
 8005422:	42b5      	cmp	r5, r6
 8005424:	d11a      	bne.n	800545c <_printf_common+0xc8>
 8005426:	2000      	movs	r0, #0
 8005428:	e008      	b.n	800543c <_printf_common+0xa8>
 800542a:	2301      	movs	r3, #1
 800542c:	4652      	mov	r2, sl
 800542e:	4649      	mov	r1, r9
 8005430:	4638      	mov	r0, r7
 8005432:	47c0      	blx	r8
 8005434:	3001      	adds	r0, #1
 8005436:	d103      	bne.n	8005440 <_printf_common+0xac>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005440:	3501      	adds	r5, #1
 8005442:	e7c6      	b.n	80053d2 <_printf_common+0x3e>
 8005444:	18e1      	adds	r1, r4, r3
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	2030      	movs	r0, #48	; 0x30
 800544a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800544e:	4422      	add	r2, r4
 8005450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005458:	3302      	adds	r3, #2
 800545a:	e7c7      	b.n	80053ec <_printf_common+0x58>
 800545c:	2301      	movs	r3, #1
 800545e:	4622      	mov	r2, r4
 8005460:	4649      	mov	r1, r9
 8005462:	4638      	mov	r0, r7
 8005464:	47c0      	blx	r8
 8005466:	3001      	adds	r0, #1
 8005468:	d0e6      	beq.n	8005438 <_printf_common+0xa4>
 800546a:	3601      	adds	r6, #1
 800546c:	e7d9      	b.n	8005422 <_printf_common+0x8e>
	...

08005470 <_printf_i>:
 8005470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	7e0f      	ldrb	r7, [r1, #24]
 8005476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005478:	2f78      	cmp	r7, #120	; 0x78
 800547a:	4691      	mov	r9, r2
 800547c:	4680      	mov	r8, r0
 800547e:	460c      	mov	r4, r1
 8005480:	469a      	mov	sl, r3
 8005482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005486:	d807      	bhi.n	8005498 <_printf_i+0x28>
 8005488:	2f62      	cmp	r7, #98	; 0x62
 800548a:	d80a      	bhi.n	80054a2 <_printf_i+0x32>
 800548c:	2f00      	cmp	r7, #0
 800548e:	f000 80d8 	beq.w	8005642 <_printf_i+0x1d2>
 8005492:	2f58      	cmp	r7, #88	; 0x58
 8005494:	f000 80a3 	beq.w	80055de <_printf_i+0x16e>
 8005498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800549c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a0:	e03a      	b.n	8005518 <_printf_i+0xa8>
 80054a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054a6:	2b15      	cmp	r3, #21
 80054a8:	d8f6      	bhi.n	8005498 <_printf_i+0x28>
 80054aa:	a101      	add	r1, pc, #4	; (adr r1, 80054b0 <_printf_i+0x40>)
 80054ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b0:	08005509 	.word	0x08005509
 80054b4:	0800551d 	.word	0x0800551d
 80054b8:	08005499 	.word	0x08005499
 80054bc:	08005499 	.word	0x08005499
 80054c0:	08005499 	.word	0x08005499
 80054c4:	08005499 	.word	0x08005499
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	08005499 	.word	0x08005499
 80054d0:	08005499 	.word	0x08005499
 80054d4:	08005499 	.word	0x08005499
 80054d8:	08005499 	.word	0x08005499
 80054dc:	08005629 	.word	0x08005629
 80054e0:	0800554d 	.word	0x0800554d
 80054e4:	0800560b 	.word	0x0800560b
 80054e8:	08005499 	.word	0x08005499
 80054ec:	08005499 	.word	0x08005499
 80054f0:	0800564b 	.word	0x0800564b
 80054f4:	08005499 	.word	0x08005499
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	08005499 	.word	0x08005499
 8005500:	08005499 	.word	0x08005499
 8005504:	08005613 	.word	0x08005613
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	602a      	str	r2, [r5, #0]
 8005510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005518:	2301      	movs	r3, #1
 800551a:	e0a3      	b.n	8005664 <_printf_i+0x1f4>
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	6829      	ldr	r1, [r5, #0]
 8005520:	0606      	lsls	r6, r0, #24
 8005522:	f101 0304 	add.w	r3, r1, #4
 8005526:	d50a      	bpl.n	800553e <_printf_i+0xce>
 8005528:	680e      	ldr	r6, [r1, #0]
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	2e00      	cmp	r6, #0
 800552e:	da03      	bge.n	8005538 <_printf_i+0xc8>
 8005530:	232d      	movs	r3, #45	; 0x2d
 8005532:	4276      	negs	r6, r6
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	485e      	ldr	r0, [pc, #376]	; (80056b4 <_printf_i+0x244>)
 800553a:	230a      	movs	r3, #10
 800553c:	e019      	b.n	8005572 <_printf_i+0x102>
 800553e:	680e      	ldr	r6, [r1, #0]
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005546:	bf18      	it	ne
 8005548:	b236      	sxthne	r6, r6
 800554a:	e7ef      	b.n	800552c <_printf_i+0xbc>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	1d19      	adds	r1, r3, #4
 8005552:	6029      	str	r1, [r5, #0]
 8005554:	0601      	lsls	r1, r0, #24
 8005556:	d501      	bpl.n	800555c <_printf_i+0xec>
 8005558:	681e      	ldr	r6, [r3, #0]
 800555a:	e002      	b.n	8005562 <_printf_i+0xf2>
 800555c:	0646      	lsls	r6, r0, #25
 800555e:	d5fb      	bpl.n	8005558 <_printf_i+0xe8>
 8005560:	881e      	ldrh	r6, [r3, #0]
 8005562:	4854      	ldr	r0, [pc, #336]	; (80056b4 <_printf_i+0x244>)
 8005564:	2f6f      	cmp	r7, #111	; 0x6f
 8005566:	bf0c      	ite	eq
 8005568:	2308      	moveq	r3, #8
 800556a:	230a      	movne	r3, #10
 800556c:	2100      	movs	r1, #0
 800556e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005572:	6865      	ldr	r5, [r4, #4]
 8005574:	60a5      	str	r5, [r4, #8]
 8005576:	2d00      	cmp	r5, #0
 8005578:	bfa2      	ittt	ge
 800557a:	6821      	ldrge	r1, [r4, #0]
 800557c:	f021 0104 	bicge.w	r1, r1, #4
 8005580:	6021      	strge	r1, [r4, #0]
 8005582:	b90e      	cbnz	r6, 8005588 <_printf_i+0x118>
 8005584:	2d00      	cmp	r5, #0
 8005586:	d04d      	beq.n	8005624 <_printf_i+0x1b4>
 8005588:	4615      	mov	r5, r2
 800558a:	fbb6 f1f3 	udiv	r1, r6, r3
 800558e:	fb03 6711 	mls	r7, r3, r1, r6
 8005592:	5dc7      	ldrb	r7, [r0, r7]
 8005594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005598:	4637      	mov	r7, r6
 800559a:	42bb      	cmp	r3, r7
 800559c:	460e      	mov	r6, r1
 800559e:	d9f4      	bls.n	800558a <_printf_i+0x11a>
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d10b      	bne.n	80055bc <_printf_i+0x14c>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	07de      	lsls	r6, r3, #31
 80055a8:	d508      	bpl.n	80055bc <_printf_i+0x14c>
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	6861      	ldr	r1, [r4, #4]
 80055ae:	4299      	cmp	r1, r3
 80055b0:	bfde      	ittt	le
 80055b2:	2330      	movle	r3, #48	; 0x30
 80055b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055bc:	1b52      	subs	r2, r2, r5
 80055be:	6122      	str	r2, [r4, #16]
 80055c0:	f8cd a000 	str.w	sl, [sp]
 80055c4:	464b      	mov	r3, r9
 80055c6:	aa03      	add	r2, sp, #12
 80055c8:	4621      	mov	r1, r4
 80055ca:	4640      	mov	r0, r8
 80055cc:	f7ff fee2 	bl	8005394 <_printf_common>
 80055d0:	3001      	adds	r0, #1
 80055d2:	d14c      	bne.n	800566e <_printf_i+0x1fe>
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	b004      	add	sp, #16
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	4835      	ldr	r0, [pc, #212]	; (80056b4 <_printf_i+0x244>)
 80055e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055e4:	6829      	ldr	r1, [r5, #0]
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80055ec:	6029      	str	r1, [r5, #0]
 80055ee:	061d      	lsls	r5, r3, #24
 80055f0:	d514      	bpl.n	800561c <_printf_i+0x1ac>
 80055f2:	07df      	lsls	r7, r3, #31
 80055f4:	bf44      	itt	mi
 80055f6:	f043 0320 	orrmi.w	r3, r3, #32
 80055fa:	6023      	strmi	r3, [r4, #0]
 80055fc:	b91e      	cbnz	r6, 8005606 <_printf_i+0x196>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f023 0320 	bic.w	r3, r3, #32
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	2310      	movs	r3, #16
 8005608:	e7b0      	b.n	800556c <_printf_i+0xfc>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	f043 0320 	orr.w	r3, r3, #32
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	2378      	movs	r3, #120	; 0x78
 8005614:	4828      	ldr	r0, [pc, #160]	; (80056b8 <_printf_i+0x248>)
 8005616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800561a:	e7e3      	b.n	80055e4 <_printf_i+0x174>
 800561c:	0659      	lsls	r1, r3, #25
 800561e:	bf48      	it	mi
 8005620:	b2b6      	uxthmi	r6, r6
 8005622:	e7e6      	b.n	80055f2 <_printf_i+0x182>
 8005624:	4615      	mov	r5, r2
 8005626:	e7bb      	b.n	80055a0 <_printf_i+0x130>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	6826      	ldr	r6, [r4, #0]
 800562c:	6961      	ldr	r1, [r4, #20]
 800562e:	1d18      	adds	r0, r3, #4
 8005630:	6028      	str	r0, [r5, #0]
 8005632:	0635      	lsls	r5, r6, #24
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	d501      	bpl.n	800563c <_printf_i+0x1cc>
 8005638:	6019      	str	r1, [r3, #0]
 800563a:	e002      	b.n	8005642 <_printf_i+0x1d2>
 800563c:	0670      	lsls	r0, r6, #25
 800563e:	d5fb      	bpl.n	8005638 <_printf_i+0x1c8>
 8005640:	8019      	strh	r1, [r3, #0]
 8005642:	2300      	movs	r3, #0
 8005644:	6123      	str	r3, [r4, #16]
 8005646:	4615      	mov	r5, r2
 8005648:	e7ba      	b.n	80055c0 <_printf_i+0x150>
 800564a:	682b      	ldr	r3, [r5, #0]
 800564c:	1d1a      	adds	r2, r3, #4
 800564e:	602a      	str	r2, [r5, #0]
 8005650:	681d      	ldr	r5, [r3, #0]
 8005652:	6862      	ldr	r2, [r4, #4]
 8005654:	2100      	movs	r1, #0
 8005656:	4628      	mov	r0, r5
 8005658:	f7fa fdfa 	bl	8000250 <memchr>
 800565c:	b108      	cbz	r0, 8005662 <_printf_i+0x1f2>
 800565e:	1b40      	subs	r0, r0, r5
 8005660:	6060      	str	r0, [r4, #4]
 8005662:	6863      	ldr	r3, [r4, #4]
 8005664:	6123      	str	r3, [r4, #16]
 8005666:	2300      	movs	r3, #0
 8005668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566c:	e7a8      	b.n	80055c0 <_printf_i+0x150>
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	462a      	mov	r2, r5
 8005672:	4649      	mov	r1, r9
 8005674:	4640      	mov	r0, r8
 8005676:	47d0      	blx	sl
 8005678:	3001      	adds	r0, #1
 800567a:	d0ab      	beq.n	80055d4 <_printf_i+0x164>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	079b      	lsls	r3, r3, #30
 8005680:	d413      	bmi.n	80056aa <_printf_i+0x23a>
 8005682:	68e0      	ldr	r0, [r4, #12]
 8005684:	9b03      	ldr	r3, [sp, #12]
 8005686:	4298      	cmp	r0, r3
 8005688:	bfb8      	it	lt
 800568a:	4618      	movlt	r0, r3
 800568c:	e7a4      	b.n	80055d8 <_printf_i+0x168>
 800568e:	2301      	movs	r3, #1
 8005690:	4632      	mov	r2, r6
 8005692:	4649      	mov	r1, r9
 8005694:	4640      	mov	r0, r8
 8005696:	47d0      	blx	sl
 8005698:	3001      	adds	r0, #1
 800569a:	d09b      	beq.n	80055d4 <_printf_i+0x164>
 800569c:	3501      	adds	r5, #1
 800569e:	68e3      	ldr	r3, [r4, #12]
 80056a0:	9903      	ldr	r1, [sp, #12]
 80056a2:	1a5b      	subs	r3, r3, r1
 80056a4:	42ab      	cmp	r3, r5
 80056a6:	dcf2      	bgt.n	800568e <_printf_i+0x21e>
 80056a8:	e7eb      	b.n	8005682 <_printf_i+0x212>
 80056aa:	2500      	movs	r5, #0
 80056ac:	f104 0619 	add.w	r6, r4, #25
 80056b0:	e7f5      	b.n	800569e <_printf_i+0x22e>
 80056b2:	bf00      	nop
 80056b4:	080059d5 	.word	0x080059d5
 80056b8:	080059e6 	.word	0x080059e6

080056bc <memcpy>:
 80056bc:	440a      	add	r2, r1
 80056be:	4291      	cmp	r1, r2
 80056c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c4:	d100      	bne.n	80056c8 <memcpy+0xc>
 80056c6:	4770      	bx	lr
 80056c8:	b510      	push	{r4, lr}
 80056ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d2:	4291      	cmp	r1, r2
 80056d4:	d1f9      	bne.n	80056ca <memcpy+0xe>
 80056d6:	bd10      	pop	{r4, pc}

080056d8 <memmove>:
 80056d8:	4288      	cmp	r0, r1
 80056da:	b510      	push	{r4, lr}
 80056dc:	eb01 0402 	add.w	r4, r1, r2
 80056e0:	d902      	bls.n	80056e8 <memmove+0x10>
 80056e2:	4284      	cmp	r4, r0
 80056e4:	4623      	mov	r3, r4
 80056e6:	d807      	bhi.n	80056f8 <memmove+0x20>
 80056e8:	1e43      	subs	r3, r0, #1
 80056ea:	42a1      	cmp	r1, r4
 80056ec:	d008      	beq.n	8005700 <memmove+0x28>
 80056ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056f6:	e7f8      	b.n	80056ea <memmove+0x12>
 80056f8:	4402      	add	r2, r0
 80056fa:	4601      	mov	r1, r0
 80056fc:	428a      	cmp	r2, r1
 80056fe:	d100      	bne.n	8005702 <memmove+0x2a>
 8005700:	bd10      	pop	{r4, pc}
 8005702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800570a:	e7f7      	b.n	80056fc <memmove+0x24>

0800570c <_free_r>:
 800570c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800570e:	2900      	cmp	r1, #0
 8005710:	d044      	beq.n	800579c <_free_r+0x90>
 8005712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005716:	9001      	str	r0, [sp, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f1a1 0404 	sub.w	r4, r1, #4
 800571e:	bfb8      	it	lt
 8005720:	18e4      	addlt	r4, r4, r3
 8005722:	f000 f913 	bl	800594c <__malloc_lock>
 8005726:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <_free_r+0x94>)
 8005728:	9801      	ldr	r0, [sp, #4]
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	b933      	cbnz	r3, 800573c <_free_r+0x30>
 800572e:	6063      	str	r3, [r4, #4]
 8005730:	6014      	str	r4, [r2, #0]
 8005732:	b003      	add	sp, #12
 8005734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005738:	f000 b90e 	b.w	8005958 <__malloc_unlock>
 800573c:	42a3      	cmp	r3, r4
 800573e:	d908      	bls.n	8005752 <_free_r+0x46>
 8005740:	6825      	ldr	r5, [r4, #0]
 8005742:	1961      	adds	r1, r4, r5
 8005744:	428b      	cmp	r3, r1
 8005746:	bf01      	itttt	eq
 8005748:	6819      	ldreq	r1, [r3, #0]
 800574a:	685b      	ldreq	r3, [r3, #4]
 800574c:	1949      	addeq	r1, r1, r5
 800574e:	6021      	streq	r1, [r4, #0]
 8005750:	e7ed      	b.n	800572e <_free_r+0x22>
 8005752:	461a      	mov	r2, r3
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	b10b      	cbz	r3, 800575c <_free_r+0x50>
 8005758:	42a3      	cmp	r3, r4
 800575a:	d9fa      	bls.n	8005752 <_free_r+0x46>
 800575c:	6811      	ldr	r1, [r2, #0]
 800575e:	1855      	adds	r5, r2, r1
 8005760:	42a5      	cmp	r5, r4
 8005762:	d10b      	bne.n	800577c <_free_r+0x70>
 8005764:	6824      	ldr	r4, [r4, #0]
 8005766:	4421      	add	r1, r4
 8005768:	1854      	adds	r4, r2, r1
 800576a:	42a3      	cmp	r3, r4
 800576c:	6011      	str	r1, [r2, #0]
 800576e:	d1e0      	bne.n	8005732 <_free_r+0x26>
 8005770:	681c      	ldr	r4, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	6053      	str	r3, [r2, #4]
 8005776:	4421      	add	r1, r4
 8005778:	6011      	str	r1, [r2, #0]
 800577a:	e7da      	b.n	8005732 <_free_r+0x26>
 800577c:	d902      	bls.n	8005784 <_free_r+0x78>
 800577e:	230c      	movs	r3, #12
 8005780:	6003      	str	r3, [r0, #0]
 8005782:	e7d6      	b.n	8005732 <_free_r+0x26>
 8005784:	6825      	ldr	r5, [r4, #0]
 8005786:	1961      	adds	r1, r4, r5
 8005788:	428b      	cmp	r3, r1
 800578a:	bf04      	itt	eq
 800578c:	6819      	ldreq	r1, [r3, #0]
 800578e:	685b      	ldreq	r3, [r3, #4]
 8005790:	6063      	str	r3, [r4, #4]
 8005792:	bf04      	itt	eq
 8005794:	1949      	addeq	r1, r1, r5
 8005796:	6021      	streq	r1, [r4, #0]
 8005798:	6054      	str	r4, [r2, #4]
 800579a:	e7ca      	b.n	8005732 <_free_r+0x26>
 800579c:	b003      	add	sp, #12
 800579e:	bd30      	pop	{r4, r5, pc}
 80057a0:	20000608 	.word	0x20000608

080057a4 <sbrk_aligned>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4e0e      	ldr	r6, [pc, #56]	; (80057e0 <sbrk_aligned+0x3c>)
 80057a8:	460c      	mov	r4, r1
 80057aa:	6831      	ldr	r1, [r6, #0]
 80057ac:	4605      	mov	r5, r0
 80057ae:	b911      	cbnz	r1, 80057b6 <sbrk_aligned+0x12>
 80057b0:	f000 f8bc 	bl	800592c <_sbrk_r>
 80057b4:	6030      	str	r0, [r6, #0]
 80057b6:	4621      	mov	r1, r4
 80057b8:	4628      	mov	r0, r5
 80057ba:	f000 f8b7 	bl	800592c <_sbrk_r>
 80057be:	1c43      	adds	r3, r0, #1
 80057c0:	d00a      	beq.n	80057d8 <sbrk_aligned+0x34>
 80057c2:	1cc4      	adds	r4, r0, #3
 80057c4:	f024 0403 	bic.w	r4, r4, #3
 80057c8:	42a0      	cmp	r0, r4
 80057ca:	d007      	beq.n	80057dc <sbrk_aligned+0x38>
 80057cc:	1a21      	subs	r1, r4, r0
 80057ce:	4628      	mov	r0, r5
 80057d0:	f000 f8ac 	bl	800592c <_sbrk_r>
 80057d4:	3001      	adds	r0, #1
 80057d6:	d101      	bne.n	80057dc <sbrk_aligned+0x38>
 80057d8:	f04f 34ff 	mov.w	r4, #4294967295
 80057dc:	4620      	mov	r0, r4
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	2000060c 	.word	0x2000060c

080057e4 <_malloc_r>:
 80057e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e8:	1ccd      	adds	r5, r1, #3
 80057ea:	f025 0503 	bic.w	r5, r5, #3
 80057ee:	3508      	adds	r5, #8
 80057f0:	2d0c      	cmp	r5, #12
 80057f2:	bf38      	it	cc
 80057f4:	250c      	movcc	r5, #12
 80057f6:	2d00      	cmp	r5, #0
 80057f8:	4607      	mov	r7, r0
 80057fa:	db01      	blt.n	8005800 <_malloc_r+0x1c>
 80057fc:	42a9      	cmp	r1, r5
 80057fe:	d905      	bls.n	800580c <_malloc_r+0x28>
 8005800:	230c      	movs	r3, #12
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	2600      	movs	r6, #0
 8005806:	4630      	mov	r0, r6
 8005808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800580c:	4e2e      	ldr	r6, [pc, #184]	; (80058c8 <_malloc_r+0xe4>)
 800580e:	f000 f89d 	bl	800594c <__malloc_lock>
 8005812:	6833      	ldr	r3, [r6, #0]
 8005814:	461c      	mov	r4, r3
 8005816:	bb34      	cbnz	r4, 8005866 <_malloc_r+0x82>
 8005818:	4629      	mov	r1, r5
 800581a:	4638      	mov	r0, r7
 800581c:	f7ff ffc2 	bl	80057a4 <sbrk_aligned>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	4604      	mov	r4, r0
 8005824:	d14d      	bne.n	80058c2 <_malloc_r+0xde>
 8005826:	6834      	ldr	r4, [r6, #0]
 8005828:	4626      	mov	r6, r4
 800582a:	2e00      	cmp	r6, #0
 800582c:	d140      	bne.n	80058b0 <_malloc_r+0xcc>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	4631      	mov	r1, r6
 8005832:	4638      	mov	r0, r7
 8005834:	eb04 0803 	add.w	r8, r4, r3
 8005838:	f000 f878 	bl	800592c <_sbrk_r>
 800583c:	4580      	cmp	r8, r0
 800583e:	d13a      	bne.n	80058b6 <_malloc_r+0xd2>
 8005840:	6821      	ldr	r1, [r4, #0]
 8005842:	3503      	adds	r5, #3
 8005844:	1a6d      	subs	r5, r5, r1
 8005846:	f025 0503 	bic.w	r5, r5, #3
 800584a:	3508      	adds	r5, #8
 800584c:	2d0c      	cmp	r5, #12
 800584e:	bf38      	it	cc
 8005850:	250c      	movcc	r5, #12
 8005852:	4629      	mov	r1, r5
 8005854:	4638      	mov	r0, r7
 8005856:	f7ff ffa5 	bl	80057a4 <sbrk_aligned>
 800585a:	3001      	adds	r0, #1
 800585c:	d02b      	beq.n	80058b6 <_malloc_r+0xd2>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	442b      	add	r3, r5
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	e00e      	b.n	8005884 <_malloc_r+0xa0>
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	1b52      	subs	r2, r2, r5
 800586a:	d41e      	bmi.n	80058aa <_malloc_r+0xc6>
 800586c:	2a0b      	cmp	r2, #11
 800586e:	d916      	bls.n	800589e <_malloc_r+0xba>
 8005870:	1961      	adds	r1, r4, r5
 8005872:	42a3      	cmp	r3, r4
 8005874:	6025      	str	r5, [r4, #0]
 8005876:	bf18      	it	ne
 8005878:	6059      	strne	r1, [r3, #4]
 800587a:	6863      	ldr	r3, [r4, #4]
 800587c:	bf08      	it	eq
 800587e:	6031      	streq	r1, [r6, #0]
 8005880:	5162      	str	r2, [r4, r5]
 8005882:	604b      	str	r3, [r1, #4]
 8005884:	4638      	mov	r0, r7
 8005886:	f104 060b 	add.w	r6, r4, #11
 800588a:	f000 f865 	bl	8005958 <__malloc_unlock>
 800588e:	f026 0607 	bic.w	r6, r6, #7
 8005892:	1d23      	adds	r3, r4, #4
 8005894:	1af2      	subs	r2, r6, r3
 8005896:	d0b6      	beq.n	8005806 <_malloc_r+0x22>
 8005898:	1b9b      	subs	r3, r3, r6
 800589a:	50a3      	str	r3, [r4, r2]
 800589c:	e7b3      	b.n	8005806 <_malloc_r+0x22>
 800589e:	6862      	ldr	r2, [r4, #4]
 80058a0:	42a3      	cmp	r3, r4
 80058a2:	bf0c      	ite	eq
 80058a4:	6032      	streq	r2, [r6, #0]
 80058a6:	605a      	strne	r2, [r3, #4]
 80058a8:	e7ec      	b.n	8005884 <_malloc_r+0xa0>
 80058aa:	4623      	mov	r3, r4
 80058ac:	6864      	ldr	r4, [r4, #4]
 80058ae:	e7b2      	b.n	8005816 <_malloc_r+0x32>
 80058b0:	4634      	mov	r4, r6
 80058b2:	6876      	ldr	r6, [r6, #4]
 80058b4:	e7b9      	b.n	800582a <_malloc_r+0x46>
 80058b6:	230c      	movs	r3, #12
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	4638      	mov	r0, r7
 80058bc:	f000 f84c 	bl	8005958 <__malloc_unlock>
 80058c0:	e7a1      	b.n	8005806 <_malloc_r+0x22>
 80058c2:	6025      	str	r5, [r4, #0]
 80058c4:	e7de      	b.n	8005884 <_malloc_r+0xa0>
 80058c6:	bf00      	nop
 80058c8:	20000608 	.word	0x20000608

080058cc <_realloc_r>:
 80058cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d0:	4680      	mov	r8, r0
 80058d2:	4614      	mov	r4, r2
 80058d4:	460e      	mov	r6, r1
 80058d6:	b921      	cbnz	r1, 80058e2 <_realloc_r+0x16>
 80058d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4611      	mov	r1, r2
 80058de:	f7ff bf81 	b.w	80057e4 <_malloc_r>
 80058e2:	b92a      	cbnz	r2, 80058f0 <_realloc_r+0x24>
 80058e4:	f7ff ff12 	bl	800570c <_free_r>
 80058e8:	4625      	mov	r5, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f0:	f000 f838 	bl	8005964 <_malloc_usable_size_r>
 80058f4:	4284      	cmp	r4, r0
 80058f6:	4607      	mov	r7, r0
 80058f8:	d802      	bhi.n	8005900 <_realloc_r+0x34>
 80058fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058fe:	d812      	bhi.n	8005926 <_realloc_r+0x5a>
 8005900:	4621      	mov	r1, r4
 8005902:	4640      	mov	r0, r8
 8005904:	f7ff ff6e 	bl	80057e4 <_malloc_r>
 8005908:	4605      	mov	r5, r0
 800590a:	2800      	cmp	r0, #0
 800590c:	d0ed      	beq.n	80058ea <_realloc_r+0x1e>
 800590e:	42bc      	cmp	r4, r7
 8005910:	4622      	mov	r2, r4
 8005912:	4631      	mov	r1, r6
 8005914:	bf28      	it	cs
 8005916:	463a      	movcs	r2, r7
 8005918:	f7ff fed0 	bl	80056bc <memcpy>
 800591c:	4631      	mov	r1, r6
 800591e:	4640      	mov	r0, r8
 8005920:	f7ff fef4 	bl	800570c <_free_r>
 8005924:	e7e1      	b.n	80058ea <_realloc_r+0x1e>
 8005926:	4635      	mov	r5, r6
 8005928:	e7df      	b.n	80058ea <_realloc_r+0x1e>
	...

0800592c <_sbrk_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d06      	ldr	r5, [pc, #24]	; (8005948 <_sbrk_r+0x1c>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fb f984 	bl	8000c44 <_sbrk>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_sbrk_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_sbrk_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000610 	.word	0x20000610

0800594c <__malloc_lock>:
 800594c:	4801      	ldr	r0, [pc, #4]	; (8005954 <__malloc_lock+0x8>)
 800594e:	f000 b811 	b.w	8005974 <__retarget_lock_acquire_recursive>
 8005952:	bf00      	nop
 8005954:	20000614 	.word	0x20000614

08005958 <__malloc_unlock>:
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <__malloc_unlock+0x8>)
 800595a:	f000 b80c 	b.w	8005976 <__retarget_lock_release_recursive>
 800595e:	bf00      	nop
 8005960:	20000614 	.word	0x20000614

08005964 <_malloc_usable_size_r>:
 8005964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005968:	1f18      	subs	r0, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	bfbc      	itt	lt
 800596e:	580b      	ldrlt	r3, [r1, r0]
 8005970:	18c0      	addlt	r0, r0, r3
 8005972:	4770      	bx	lr

08005974 <__retarget_lock_acquire_recursive>:
 8005974:	4770      	bx	lr

08005976 <__retarget_lock_release_recursive>:
 8005976:	4770      	bx	lr

08005978 <_init>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	bf00      	nop
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr

08005984 <_fini>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr
